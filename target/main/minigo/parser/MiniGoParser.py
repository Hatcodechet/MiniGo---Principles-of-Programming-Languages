# Generated from main/minigo/parser/MiniGo.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3D")
        buf.write("\u052e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\3\2\7\2\u00ba")
        buf.write("\n\2\f\2\16\2\u00bd\13\2\3\2\3\2\3\2\7\2\u00c2\n\2\f\2")
        buf.write("\16\2\u00c5\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\5\3\u00d4\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\5\4\u00e1\n\4\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\5\5\u00ee\n\5\3\6\3\6\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00ff\n")
        buf.write("\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u010f\n\n\3\13\3\13\3\13\3\13\5\13\u0115\n\13")
        buf.write("\3\13\3\13\3\f\3\f\3\r\7\r\u011c\n\r\f\r\16\r\u011f\13")
        buf.write("\r\3\r\3\r\7\r\u0123\n\r\f\r\16\r\u0126\13\r\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\5\16\u012e\n\16\3\17\3\17\3\17\3")
        buf.write("\17\3\20\3\20\3\20\3\20\3\20\5\20\u0139\n\20\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0143\n\22\f\22\16")
        buf.write("\22\u0146\13\22\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u014e")
        buf.write("\n\23\f\23\16\23\u0151\13\23\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\7\24\u0159\n\24\f\24\16\24\u015c\13\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u0164\n\25\f\25\16\25\u0167")
        buf.write("\13\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u016f\n\26\f")
        buf.write("\26\16\26\u0172\13\26\3\27\3\27\3\27\3\27\3\27\3\27\7")
        buf.write("\27\u017a\n\27\f\27\16\27\u017d\13\27\3\30\3\30\3\30\5")
        buf.write("\30\u0182\n\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\5\33\u018e\n\33\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u0196\n\34\3\35\3\35\3\36\3\36\3\36\5\36\u019d")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u01a8\n\37\3 \3 \3 \3 \7 \u01ae\n \f \16 \u01b1\13 \3")
        buf.write(" \3 \5 \u01b5\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u01c0\n")
        buf.write("!\3\"\3\"\3\"\7\"\u01c5\n\"\f\"\16\"\u01c8\13\"\3\"\5")
        buf.write("\"\u01cb\n\"\3#\3#\3#\3#\5#\u01d1\n#\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u01db\n$\3%\3%\3%\3%\3%\3%\3%\3%\5%\u01e5\n")
        buf.write("%\3&\3&\3&\3&\3&\3&\3&\5&\u01ee\n&\3\'\3\'\5\'\u01f2\n")
        buf.write("\'\3(\3(\5(\u01f6\n(\3)\3)\3)\3)\6)\u01fc\n)\r)\16)\u01fd")
        buf.write("\3)\3)\3)\3)\6)\u0204\n)\r)\16)\u0205\3)\3)\3)\3)\6)\u020c")
        buf.write("\n)\r)\16)\u020d\3)\3)\3)\3)\6)\u0214\n)\r)\16)\u0215")
        buf.write("\3)\3)\3)\3)\6)\u021c\n)\r)\16)\u021d\3)\3)\3)\3)\6)\u0224")
        buf.write("\n)\r)\16)\u0225\3)\3)\3)\3)\6)\u022c\n)\r)\16)\u022d")
        buf.write("\3)\5)\u0231\n)\3*\3*\3*\3*\6*\u0237\n*\r*\16*\u0238\3")
        buf.write("*\3*\3*\3*\6*\u023f\n*\r*\16*\u0240\3*\3*\3*\3*\6*\u0247")
        buf.write("\n*\r*\16*\u0248\3*\3*\3*\3*\6*\u024f\n*\r*\16*\u0250")
        buf.write("\3*\3*\3*\3*\6*\u0257\n*\r*\16*\u0258\3*\3*\3*\3*\6*\u025f")
        buf.write("\n*\r*\16*\u0260\3*\3*\3*\3*\6*\u0267\n*\r*\16*\u0268")
        buf.write("\3*\5*\u026c\n*\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\5-\u027d\n-\3.\3.\3.\3.\3.\5.\u0284\n.\3/\3/\7")
        buf.write("/\u0288\n/\f/\16/\u028b\13/\3/\5/\u028e\n/\3\60\3\60\3")
        buf.write("\60\3\60\3\60\7\60\u0295\n\60\f\60\16\60\u0298\13\60\3")
        buf.write("\60\3\60\3\61\3\61\7\61\u029e\n\61\f\61\16\61\u02a1\13")
        buf.write("\61\3\61\3\61\3\62\3\62\7\62\u02a7\n\62\f\62\16\62\u02aa")
        buf.write("\13\62\3\62\3\62\7\62\u02ae\n\62\f\62\16\62\u02b1\13\62")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u02bb\n")
        buf.write("\63\f\63\16\63\u02be\13\63\3\63\3\63\3\64\3\64\7\64\u02c4")
        buf.write("\n\64\f\64\16\64\u02c7\13\64\3\64\3\64\3\64\3\65\3\65")
        buf.write("\3\65\3\65\3\65\7\65\u02d1\n\65\f\65\16\65\u02d4\13\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u02df")
        buf.write("\n\65\f\65\16\65\u02e2\13\65\3\65\3\65\3\65\7\65\u02e7")
        buf.write("\n\65\f\65\16\65\u02ea\13\65\3\65\7\65\u02ed\n\65\f\65")
        buf.write("\16\65\u02f0\13\65\3\65\3\65\3\65\3\65\3\65\7\65\u02f7")
        buf.write("\n\65\f\65\16\65\u02fa\13\65\3\65\3\65\5\65\u02fe\n\65")
        buf.write("\3\66\3\66\7\66\u0302\n\66\f\66\16\66\u0305\13\66\3\66")
        buf.write("\7\66\u0308\n\66\f\66\16\66\u030b\13\66\3\66\3\66\7\66")
        buf.write("\u030f\n\66\f\66\16\66\u0312\13\66\3\67\3\67\7\67\u0316")
        buf.write("\n\67\f\67\16\67\u0319\13\67\3\67\7\67\u031c\n\67\f\67")
        buf.write("\16\67\u031f\13\67\3\67\5\67\u0322\n\67\3\67\3\67\38\3")
        buf.write("8\78\u0328\n8\f8\168\u032b\138\38\78\u032e\n8\f8\168\u0331")
        buf.write("\138\38\38\68\u0335\n8\r8\168\u0336\39\39\39\39\39\39")
        buf.write("\59\u033f\n9\39\39\39\69\u0344\n9\r9\169\u0345\39\39\3")
        buf.write("9\39\39\39\39\59\u034f\n9\39\39\39\39\59\u0355\n9\39\3")
        buf.write("9\59\u0359\n9\39\59\u035c\n9\39\59\u035f\n9\39\39\39\3")
        buf.write("9\39\39\39\69\u0368\n9\r9\169\u0369\39\39\39\39\39\59")
        buf.write("\u0371\n9\3:\3:\6:\u0375\n:\r:\16:\u0376\3;\3;\6;\u037b")
        buf.write("\n;\r;\16;\u037c\3<\3<\6<\u0381\n<\r<\16<\u0382\3=\3=")
        buf.write("\3=\6=\u0388\n=\r=\16=\u0389\3=\3=\6=\u038e\n=\r=\16=")
        buf.write("\u038f\5=\u0392\n=\3>\3>\3>\3>\3>\3>\5>\u039a\n>\3?\3")
        buf.write("?\3?\3?\3?\3?\5?\u03a2\n?\3@\3@\3@\3@\5@\u03a8\n@\3A\3")
        buf.write("A\3A\3A\3A\3A\6A\u03b0\nA\rA\16A\u03b1\3A\3A\3A\3A\3A")
        buf.write("\6A\u03b9\nA\rA\16A\u03ba\3A\3A\3A\3A\6A\u03c1\nA\rA\16")
        buf.write("A\u03c2\3A\3A\3A\3A\3A\3A\3A\6A\u03cc\nA\rA\16A\u03cd")
        buf.write("\3A\3A\3A\3A\3A\3A\3A\6A\u03d7\nA\rA\16A\u03d8\3A\3A\3")
        buf.write("A\3A\3A\6A\u03e0\nA\rA\16A\u03e1\5A\u03e4\nA\3B\3B\3C")
        buf.write("\3C\3C\3C\3C\6C\u03ed\nC\rC\16C\u03ee\3D\3D\3D\3D\3D\6")
        buf.write("D\u03f6\nD\rD\16D\u03f7\3E\3E\3F\3F\3F\3F\5F\u0400\nF")
        buf.write("\3F\3F\5F\u0404\nF\3F\5F\u0407\nF\3F\3F\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\5G\u0412\nG\3H\3H\3H\3I\3I\3I\3I\3I\3I\5I\u041d")
        buf.write("\nI\3J\3J\3J\5J\u0422\nJ\5J\u0424\nJ\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\5K\u042d\nK\3K\3K\3K\3K\5K\u0433\nK\3K\5K\u0436\n")
        buf.write("K\5K\u0438\nK\3L\3L\7L\u043c\nL\fL\16L\u043f\13L\3L\5")
        buf.write("L\u0442\nL\3L\3L\6L\u0446\nL\rL\16L\u0447\3M\3M\3M\3M")
        buf.write("\5M\u044e\nM\3N\3N\3N\3N\3N\5N\u0455\nN\3O\3O\3O\3O\3")
        buf.write("O\5O\u045c\nO\3O\3O\5O\u0460\nO\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\5O\u046b\nO\3O\3O\5O\u046f\nO\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\5O\u047a\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0486")
        buf.write("\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0492\nO\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u04a7")
        buf.write("\nO\3P\3P\3P\7P\u04ac\nP\fP\16P\u04af\13P\3Q\3Q\5Q\u04b3")
        buf.write("\nQ\3R\5R\u04b6\nR\3R\5R\u04b9\nR\3S\3S\3S\3T\3T\3T\3")
        buf.write("T\3T\7T\u04c3\nT\fT\16T\u04c6\13T\3T\6T\u04c9\nT\rT\16")
        buf.write("T\u04ca\3T\7T\u04ce\nT\fT\16T\u04d1\13T\3T\3T\3T\3U\3")
        buf.write("U\3U\7U\u04d9\nU\fU\16U\u04dc\13U\3U\3U\3U\5U\u04e1\n")
        buf.write("U\3V\3V\3V\6V\u04e6\nV\rV\16V\u04e7\3V\5V\u04eb\nV\3W")
        buf.write("\3W\3W\3W\3W\7W\u04f2\nW\fW\16W\u04f5\13W\3W\6W\u04f8")
        buf.write("\nW\rW\16W\u04f9\3W\7W\u04fd\nW\fW\16W\u0500\13W\3W\3")
        buf.write("W\6W\u0504\nW\rW\16W\u0505\3X\3X\3X\5X\u050b\nX\3Y\3Y")
        buf.write("\3Z\3Z\3Z\5Z\u0512\nZ\3[\3[\3[\5[\u0517\n[\3[\3[\5[\u051b")
        buf.write("\n[\3[\6[\u051e\n[\r[\16[\u051f\3\\\3\\\3\\\5\\\u0525")
        buf.write("\n\\\3\\\3\\\5\\\u0529\n\\\3\\\5\\\u052c\n\\\3\\\2\b\"")
        buf.write("$&(*,]\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\2\13\3\2\678\3\2\35\36\3\2\37\"\3\2\30\31\3\2\32\34\4")
        buf.write("\2\31\31%%\4\2\64\64??\4\2&*,,\5\2\3\3\f\17\67\67\2\u05bf")
        buf.write("\2\u00bb\3\2\2\2\4\u00d3\3\2\2\2\6\u00e0\3\2\2\2\b\u00ed")
        buf.write("\3\2\2\2\n\u00ef\3\2\2\2\f\u00f1\3\2\2\2\16\u00fe\3\2")
        buf.write("\2\2\20\u0100\3\2\2\2\22\u010e\3\2\2\2\24\u0110\3\2\2")
        buf.write("\2\26\u0118\3\2\2\2\30\u011d\3\2\2\2\32\u012d\3\2\2\2")
        buf.write("\34\u012f\3\2\2\2\36\u0138\3\2\2\2 \u013a\3\2\2\2\"\u013c")
        buf.write("\3\2\2\2$\u0147\3\2\2\2&\u0152\3\2\2\2(\u015d\3\2\2\2")
        buf.write("*\u0168\3\2\2\2,\u0173\3\2\2\2.\u0181\3\2\2\2\60\u0183")
        buf.write("\3\2\2\2\62\u0186\3\2\2\2\64\u018d\3\2\2\2\66\u0195\3")
        buf.write("\2\2\28\u0197\3\2\2\2:\u019c\3\2\2\2<\u01a7\3\2\2\2>\u01b4")
        buf.write("\3\2\2\2@\u01bf\3\2\2\2B\u01ca\3\2\2\2D\u01d0\3\2\2\2")
        buf.write("F\u01da\3\2\2\2H\u01e4\3\2\2\2J\u01ed\3\2\2\2L\u01f1\3")
        buf.write("\2\2\2N\u01f5\3\2\2\2P\u0230\3\2\2\2R\u026b\3\2\2\2T\u026d")
        buf.write("\3\2\2\2V\u026f\3\2\2\2X\u027c\3\2\2\2Z\u0283\3\2\2\2")
        buf.write("\\\u0285\3\2\2\2^\u028f\3\2\2\2`\u029b\3\2\2\2b\u02a4")
        buf.write("\3\2\2\2d\u02b4\3\2\2\2f\u02c1\3\2\2\2h\u02fd\3\2\2\2")
        buf.write("j\u02ff\3\2\2\2l\u0313\3\2\2\2n\u0325\3\2\2\2p\u0370\3")
        buf.write("\2\2\2r\u0372\3\2\2\2t\u0378\3\2\2\2v\u037e\3\2\2\2x\u0391")
        buf.write("\3\2\2\2z\u0399\3\2\2\2|\u03a1\3\2\2\2~\u03a7\3\2\2\2")
        buf.write("\u0080\u03e3\3\2\2\2\u0082\u03e5\3\2\2\2\u0084\u03e7\3")
        buf.write("\2\2\2\u0086\u03f0\3\2\2\2\u0088\u03f9\3\2\2\2\u008a\u03fb")
        buf.write("\3\2\2\2\u008c\u0411\3\2\2\2\u008e\u0413\3\2\2\2\u0090")
        buf.write("\u041c\3\2\2\2\u0092\u0423\3\2\2\2\u0094\u0437\3\2\2\2")
        buf.write("\u0096\u0439\3\2\2\2\u0098\u044d\3\2\2\2\u009a\u0454\3")
        buf.write("\2\2\2\u009c\u04a6\3\2\2\2\u009e\u04a8\3\2\2\2\u00a0\u04b0")
        buf.write("\3\2\2\2\u00a2\u04b5\3\2\2\2\u00a4\u04ba\3\2\2\2\u00a6")
        buf.write("\u04bd\3\2\2\2\u00a8\u04e0\3\2\2\2\u00aa\u04ea\3\2\2\2")
        buf.write("\u00ac\u04ec\3\2\2\2\u00ae\u050a\3\2\2\2\u00b0\u050c\3")
        buf.write("\2\2\2\u00b2\u0511\3\2\2\2\u00b4\u0513\3\2\2\2\u00b6\u0521")
        buf.write("\3\2\2\2\u00b8\u00ba\7?\2\2\u00b9\u00b8\3\2\2\2\u00ba")
        buf.write("\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2")
        buf.write("\u00bc\u00be\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be\u00c3\5")
        buf.write("z>\2\u00bf\u00c2\5z>\2\u00c0\u00c2\7?\2\2\u00c1\u00bf")
        buf.write("\3\2\2\2\u00c1\u00c0\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3")
        buf.write("\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c6\3\2\2\2")
        buf.write("\u00c5\u00c3\3\2\2\2\u00c6\u00c7\7\2\2\3\u00c7\3\3\2\2")
        buf.write("\2\u00c8\u00d4\78\2\2\u00c9\u00d4\7<\2\2\u00ca\u00d4\7")
        buf.write(">\2\2\u00cb\u00d4\7;\2\2\u00cc\u00d4\7:\2\2\u00cd\u00d4")
        buf.write("\7\26\2\2\u00ce\u00d4\7\27\2\2\u00cf\u00d4\5\f\7\2\u00d0")
        buf.write("\u00d4\5\26\f\2\u00d1\u00d4\79\2\2\u00d2\u00d4\7\25\2")
        buf.write("\2\u00d3\u00c8\3\2\2\2\u00d3\u00c9\3\2\2\2\u00d3\u00ca")
        buf.write("\3\2\2\2\u00d3\u00cb\3\2\2\2\u00d3\u00cc\3\2\2\2\u00d3")
        buf.write("\u00cd\3\2\2\2\u00d3\u00ce\3\2\2\2\u00d3\u00cf\3\2\2\2")
        buf.write("\u00d3\u00d0\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d2\3")
        buf.write("\2\2\2\u00d4\5\3\2\2\2\u00d5\u00e1\78\2\2\u00d6\u00e1")
        buf.write("\7<\2\2\u00d7\u00e1\7>\2\2\u00d8\u00e1\7;\2\2\u00d9\u00e1")
        buf.write("\7:\2\2\u00da\u00e1\7\26\2\2\u00db\u00e1\7\27\2\2\u00dc")
        buf.write("\u00e1\5\f\7\2\u00dd\u00e1\5\26\f\2\u00de\u00e1\79\2\2")
        buf.write("\u00df\u00e1\7\25\2\2\u00e0\u00d5\3\2\2\2\u00e0\u00d6")
        buf.write("\3\2\2\2\u00e0\u00d7\3\2\2\2\u00e0\u00d8\3\2\2\2\u00e0")
        buf.write("\u00d9\3\2\2\2\u00e0\u00da\3\2\2\2\u00e0\u00db\3\2\2\2")
        buf.write("\u00e0\u00dc\3\2\2\2\u00e0\u00dd\3\2\2\2\u00e0\u00de\3")
        buf.write("\2\2\2\u00e0\u00df\3\2\2\2\u00e1\7\3\2\2\2\u00e2\u00ee")
        buf.write("\78\2\2\u00e3\u00ee\7<\2\2\u00e4\u00ee\7>\2\2\u00e5\u00ee")
        buf.write("\7;\2\2\u00e6\u00ee\7:\2\2\u00e7\u00ee\7\26\2\2\u00e8")
        buf.write("\u00ee\7\27\2\2\u00e9\u00ee\5\30\r\2\u00ea\u00ee\79\2")
        buf.write("\2\u00eb\u00ee\7\25\2\2\u00ec\u00ee\7\67\2\2\u00ed\u00e2")
        buf.write("\3\2\2\2\u00ed\u00e3\3\2\2\2\u00ed\u00e4\3\2\2\2\u00ed")
        buf.write("\u00e5\3\2\2\2\u00ed\u00e6\3\2\2\2\u00ed\u00e7\3\2\2\2")
        buf.write("\u00ed\u00e8\3\2\2\2\u00ed\u00e9\3\2\2\2\u00ed\u00ea\3")
        buf.write("\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\t")
        buf.write("\3\2\2\2\u00ef\u00f0\t\2\2\2\u00f0\13\3\2\2\2\u00f1\u00f2")
        buf.write("\7\62\2\2\u00f2\u00f3\5\n\6\2\u00f3\u00f4\7\63\2\2\u00f4")
        buf.write("\u00f5\5\16\b\2\u00f5\r\3\2\2\2\u00f6\u00f7\7\62\2\2\u00f7")
        buf.write("\u00f8\5\n\6\2\u00f8\u00f9\7\63\2\2\u00f9\u00fa\5\16\b")
        buf.write("\2\u00fa\u00ff\3\2\2\2\u00fb\u00fc\5\u0082B\2\u00fc\u00fd")
        buf.write("\5\20\t\2\u00fd\u00ff\3\2\2\2\u00fe\u00f6\3\2\2\2\u00fe")
        buf.write("\u00fb\3\2\2\2\u00ff\17\3\2\2\2\u0100\u0101\7\60\2\2\u0101")
        buf.write("\u0102\5\22\n\2\u0102\u0103\7\61\2\2\u0103\21\3\2\2\2")
        buf.write("\u0104\u010f\5\b\5\2\u0105\u0106\5\b\5\2\u0106\u0107\7")
        buf.write("\66\2\2\u0107\u0108\5\22\n\2\u0108\u010f\3\2\2\2\u0109")
        buf.write("\u010f\5\20\t\2\u010a\u010b\5\20\t\2\u010b\u010c\7\66")
        buf.write("\2\2\u010c\u010d\5\22\n\2\u010d\u010f\3\2\2\2\u010e\u0104")
        buf.write("\3\2\2\2\u010e\u0105\3\2\2\2\u010e\u0109\3\2\2\2\u010e")
        buf.write("\u010a\3\2\2\2\u010f\23\3\2\2\2\u0110\u0111\7\67\2\2\u0111")
        buf.write("\u0114\7\60\2\2\u0112\u0115\5\b\5\2\u0113\u0115\5\32\16")
        buf.write("\2\u0114\u0112\3\2\2\2\u0114\u0113\3\2\2\2\u0115\u0116")
        buf.write("\3\2\2\2\u0116\u0117\7\61\2\2\u0117\25\3\2\2\2\u0118\u0119")
        buf.write("\5\24\13\2\u0119\27\3\2\2\2\u011a\u011c\7\60\2\2\u011b")
        buf.write("\u011a\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2")
        buf.write("\u011d\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u011d\3")
        buf.write("\2\2\2\u0120\u0124\5\24\13\2\u0121\u0123\7\61\2\2\u0122")
        buf.write("\u0121\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125\31\3\2\2\2\u0126\u0124\3\2")
        buf.write("\2\2\u0127\u0128\5\34\17\2\u0128\u0129\7\66\2\2\u0129")
        buf.write("\u012a\5\32\16\2\u012a\u012e\3\2\2\2\u012b\u012e\5\34")
        buf.write("\17\2\u012c\u012e\3\2\2\2\u012d\u0127\3\2\2\2\u012d\u012b")
        buf.write("\3\2\2\2\u012d\u012c\3\2\2\2\u012e\33\3\2\2\2\u012f\u0130")
        buf.write("\7\67\2\2\u0130\u0131\7\65\2\2\u0131\u0132\5 \21\2\u0132")
        buf.write("\35\3\2\2\2\u0133\u0134\5 \21\2\u0134\u0135\7\66\2\2\u0135")
        buf.write("\u0136\5\36\20\2\u0136\u0139\3\2\2\2\u0137\u0139\5 \21")
        buf.write("\2\u0138\u0133\3\2\2\2\u0138\u0137\3\2\2\2\u0139\37\3")
        buf.write("\2\2\2\u013a\u013b\5\"\22\2\u013b!\3\2\2\2\u013c\u013d")
        buf.write("\b\22\1\2\u013d\u013e\5$\23\2\u013e\u0144\3\2\2\2\u013f")
        buf.write("\u0140\f\4\2\2\u0140\u0141\7$\2\2\u0141\u0143\5$\23\2")
        buf.write("\u0142\u013f\3\2\2\2\u0143\u0146\3\2\2\2\u0144\u0142\3")
        buf.write("\2\2\2\u0144\u0145\3\2\2\2\u0145#\3\2\2\2\u0146\u0144")
        buf.write("\3\2\2\2\u0147\u0148\b\23\1\2\u0148\u0149\5&\24\2\u0149")
        buf.write("\u014f\3\2\2\2\u014a\u014b\f\4\2\2\u014b\u014c\7#\2\2")
        buf.write("\u014c\u014e\5&\24\2\u014d\u014a\3\2\2\2\u014e\u0151\3")
        buf.write("\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150%")
        buf.write("\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0153\b\24\1\2\u0153")
        buf.write("\u0154\5(\25\2\u0154\u015a\3\2\2\2\u0155\u0156\f\4\2\2")
        buf.write("\u0156\u0157\t\3\2\2\u0157\u0159\5(\25\2\u0158\u0155\3")
        buf.write("\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\'\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u015e")
        buf.write("\b\25\1\2\u015e\u015f\5*\26\2\u015f\u0165\3\2\2\2\u0160")
        buf.write("\u0161\f\4\2\2\u0161\u0162\t\4\2\2\u0162\u0164\5*\26\2")
        buf.write("\u0163\u0160\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3")
        buf.write("\2\2\2\u0165\u0166\3\2\2\2\u0166)\3\2\2\2\u0167\u0165")
        buf.write("\3\2\2\2\u0168\u0169\b\26\1\2\u0169\u016a\5,\27\2\u016a")
        buf.write("\u0170\3\2\2\2\u016b\u016c\f\4\2\2\u016c\u016d\t\5\2\2")
        buf.write("\u016d\u016f\5,\27\2\u016e\u016b\3\2\2\2\u016f\u0172\3")
        buf.write("\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171+")
        buf.write("\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0174\b\27\1\2\u0174")
        buf.write("\u0175\5.\30\2\u0175\u017b\3\2\2\2\u0176\u0177\f\4\2\2")
        buf.write("\u0177\u0178\t\6\2\2\u0178\u017a\5.\30\2\u0179\u0176\3")
        buf.write("\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c-\3\2\2\2\u017d\u017b\3\2\2\2\u017e\u017f")
        buf.write("\t\7\2\2\u017f\u0182\5.\30\2\u0180\u0182\5\60\31\2\u0181")
        buf.write("\u017e\3\2\2\2\u0181\u0180\3\2\2\2\u0182/\3\2\2\2\u0183")
        buf.write("\u0184\5\66\34\2\u0184\u0185\5\64\33\2\u0185\61\3\2\2")
        buf.write("\2\u0186\u0187\58\35\2\u0187\u0188\5\64\33\2\u0188\63")
        buf.write("\3\2\2\2\u0189\u018a\5:\36\2\u018a\u018b\5\64\33\2\u018b")
        buf.write("\u018e\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u0189\3\2\2\2")
        buf.write("\u018d\u018c\3\2\2\2\u018e\65\3\2\2\2\u018f\u0196\5\6")
        buf.write("\4\2\u0190\u0196\7\67\2\2\u0191\u0192\7.\2\2\u0192\u0193")
        buf.write("\5 \21\2\u0193\u0194\7/\2\2\u0194\u0196\3\2\2\2\u0195")
        buf.write("\u018f\3\2\2\2\u0195\u0190\3\2\2\2\u0195\u0191\3\2\2\2")
        buf.write("\u0196\67\3\2\2\2\u0197\u0198\7\67\2\2\u01989\3\2\2\2")
        buf.write("\u0199\u019d\5<\37\2\u019a\u019d\5> \2\u019b\u019d\5@")
        buf.write("!\2\u019c\u0199\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019b")
        buf.write("\3\2\2\2\u019d;\3\2\2\2\u019e\u019f\7\62\2\2\u019f\u01a0")
        buf.write("\5 \21\2\u01a0\u01a1\7\63\2\2\u01a1\u01a2\5:\36\2\u01a2")
        buf.write("\u01a8\3\2\2\2\u01a3\u01a4\7\62\2\2\u01a4\u01a5\5 \21")
        buf.write("\2\u01a5\u01a6\7\63\2\2\u01a6\u01a8\3\2\2\2\u01a7\u019e")
        buf.write("\3\2\2\2\u01a7\u01a3\3\2\2\2\u01a8=\3\2\2\2\u01a9\u01aa")
        buf.write("\7-\2\2\u01aa\u01ab\7\67\2\2\u01ab\u01af\5<\37\2\u01ac")
        buf.write("\u01ae\7?\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01b1\3\2\2\2")
        buf.write("\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b5\3")
        buf.write("\2\2\2\u01b1\u01af\3\2\2\2\u01b2\u01b3\7-\2\2\u01b3\u01b5")
        buf.write("\7\67\2\2\u01b4\u01a9\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("?\3\2\2\2\u01b6\u01b7\7.\2\2\u01b7\u01b8\5B\"\2\u01b8")
        buf.write("\u01b9\7/\2\2\u01b9\u01ba\5:\36\2\u01ba\u01c0\3\2\2\2")
        buf.write("\u01bb\u01bc\7.\2\2\u01bc\u01bd\5B\"\2\u01bd\u01be\7/")
        buf.write("\2\2\u01be\u01c0\3\2\2\2\u01bf\u01b6\3\2\2\2\u01bf\u01bb")
        buf.write("\3\2\2\2\u01c0A\3\2\2\2\u01c1\u01c6\5 \21\2\u01c2\u01c3")
        buf.write("\7\66\2\2\u01c3\u01c5\5 \21\2\u01c4\u01c2\3\2\2\2\u01c5")
        buf.write("\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2")
        buf.write("\u01c7\u01cb\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01cb\3")
        buf.write("\2\2\2\u01ca\u01c1\3\2\2\2\u01ca\u01c9\3\2\2\2\u01cbC")
        buf.write("\3\2\2\2\u01cc\u01cd\5F$\2\u01cd\u01ce\5D#\2\u01ce\u01d1")
        buf.write("\3\2\2\2\u01cf\u01d1\5F$\2\u01d0\u01cc\3\2\2\2\u01d0\u01cf")
        buf.write("\3\2\2\2\u01d1E\3\2\2\2\u01d2\u01db\5L\'\2\u01d3\u01db")
        buf.write("\5P)\2\u01d4\u01db\5h\65\2\u01d5\u01db\5p9\2\u01d6\u01db")
        buf.write("\5r:\2\u01d7\u01db\5t;\2\u01d8\u01db\5v<\2\u01d9\u01db")
        buf.write("\5x=\2\u01da\u01d2\3\2\2\2\u01da\u01d3\3\2\2\2\u01da\u01d4")
        buf.write("\3\2\2\2\u01da\u01d5\3\2\2\2\u01da\u01d6\3\2\2\2\u01da")
        buf.write("\u01d7\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01d9\3\2\2\2")
        buf.write("\u01dbG\3\2\2\2\u01dc\u01e5\5N(\2\u01dd\u01e5\5h\65\2")
        buf.write("\u01de\u01e5\5P)\2\u01df\u01e5\5p9\2\u01e0\u01e5\5r:\2")
        buf.write("\u01e1\u01e5\5t;\2\u01e2\u01e5\5v<\2\u01e3\u01e5\5x=\2")
        buf.write("\u01e4\u01dc\3\2\2\2\u01e4\u01dd\3\2\2\2\u01e4\u01de\3")
        buf.write("\2\2\2\u01e4\u01df\3\2\2\2\u01e4\u01e0\3\2\2\2\u01e4\u01e1")
        buf.write("\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e3\3\2\2\2\u01e5")
        buf.write("I\3\2\2\2\u01e6\u01ee\5N(\2\u01e7\u01ee\5h\65\2\u01e8")
        buf.write("\u01ee\5p9\2\u01e9\u01ee\5r:\2\u01ea\u01ee\5t;\2\u01eb")
        buf.write("\u01ee\5v<\2\u01ec\u01ee\5x=\2\u01ed\u01e6\3\2\2\2\u01ed")
        buf.write("\u01e7\3\2\2\2\u01ed\u01e8\3\2\2\2\u01ed\u01e9\3\2\2\2")
        buf.write("\u01ed\u01ea\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ec\3")
        buf.write("\2\2\2\u01eeK\3\2\2\2\u01ef\u01f2\5\u0080A\2\u01f0\u01f2")
        buf.write("\5\u0084C\2\u01f1\u01ef\3\2\2\2\u01f1\u01f0\3\2\2\2\u01f2")
        buf.write("M\3\2\2\2\u01f3\u01f6\5\u0080A\2\u01f4\u01f6\5\u0086D")
        buf.write("\2\u01f5\u01f3\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6O\3\2")
        buf.write("\2\2\u01f7\u01f8\5V,\2\u01f8\u01f9\7&\2\2\u01f9\u01fb")
        buf.write("\5 \21\2\u01fa\u01fc\t\b\2\2\u01fb\u01fa\3\2\2\2\u01fc")
        buf.write("\u01fd\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2")
        buf.write("\u01fe\u0231\3\2\2\2\u01ff\u0200\5V,\2\u0200\u0201\7\'")
        buf.write("\2\2\u0201\u0203\5 \21\2\u0202\u0204\t\b\2\2\u0203\u0202")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0231\3\2\2\2\u0207\u0208\5V,\2\u0208")
        buf.write("\u0209\7(\2\2\u0209\u020b\5 \21\2\u020a\u020c\t\b\2\2")
        buf.write("\u020b\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020b\3")
        buf.write("\2\2\2\u020d\u020e\3\2\2\2\u020e\u0231\3\2\2\2\u020f\u0210")
        buf.write("\5V,\2\u0210\u0211\7)\2\2\u0211\u0213\5 \21\2\u0212\u0214")
        buf.write("\t\b\2\2\u0213\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write("\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0231\3\2\2\2")
        buf.write("\u0217\u0218\5V,\2\u0218\u0219\7*\2\2\u0219\u021b\5 \21")
        buf.write("\2\u021a\u021c\t\b\2\2\u021b\u021a\3\2\2\2\u021c\u021d")
        buf.write("\3\2\2\2\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u0231\3\2\2\2\u021f\u0220\5V,\2\u0220\u0221\7+\2\2\u0221")
        buf.write("\u0223\5 \21\2\u0222\u0224\t\b\2\2\u0223\u0222\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226\3")
        buf.write("\2\2\2\u0226\u0231\3\2\2\2\u0227\u0228\5V,\2\u0228\u0229")
        buf.write("\7,\2\2\u0229\u022b\5 \21\2\u022a\u022c\t\b\2\2\u022b")
        buf.write("\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0231\3\2\2\2\u022f\u0231\7")
        buf.write("\67\2\2\u0230\u01f7\3\2\2\2\u0230\u01ff\3\2\2\2\u0230")
        buf.write("\u0207\3\2\2\2\u0230\u020f\3\2\2\2\u0230\u0217\3\2\2\2")
        buf.write("\u0230\u021f\3\2\2\2\u0230\u0227\3\2\2\2\u0230\u022f\3")
        buf.write("\2\2\2\u0231Q\3\2\2\2\u0232\u0233\5T+\2\u0233\u0234\7")
        buf.write("&\2\2\u0234\u0236\5 \21\2\u0235\u0237\t\b\2\2\u0236\u0235")
        buf.write("\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\u026c\3\2\2\2\u023a\u023b\5T+\2\u023b")
        buf.write("\u023c\7\'\2\2\u023c\u023e\5 \21\2\u023d\u023f\t\b\2\2")
        buf.write("\u023e\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u023e\3")
        buf.write("\2\2\2\u0240\u0241\3\2\2\2\u0241\u026c\3\2\2\2\u0242\u0243")
        buf.write("\5T+\2\u0243\u0244\7(\2\2\u0244\u0246\5 \21\2\u0245\u0247")
        buf.write("\t\b\2\2\u0246\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u026c\3\2\2\2")
        buf.write("\u024a\u024b\5T+\2\u024b\u024c\7)\2\2\u024c\u024e\5 \21")
        buf.write("\2\u024d\u024f\t\b\2\2\u024e\u024d\3\2\2\2\u024f\u0250")
        buf.write("\3\2\2\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u026c\3\2\2\2\u0252\u0253\5T+\2\u0253\u0254\7*\2\2\u0254")
        buf.write("\u0256\5 \21\2\u0255\u0257\t\b\2\2\u0256\u0255\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3")
        buf.write("\2\2\2\u0259\u026c\3\2\2\2\u025a\u025b\5T+\2\u025b\u025c")
        buf.write("\7+\2\2\u025c\u025e\5 \21\2\u025d\u025f\t\b\2\2\u025e")
        buf.write("\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u025e\3\2\2\2")
        buf.write("\u0260\u0261\3\2\2\2\u0261\u026c\3\2\2\2\u0262\u0263\5")
        buf.write("T+\2\u0263\u0264\7,\2\2\u0264\u0266\5 \21\2\u0265\u0267")
        buf.write("\t\b\2\2\u0266\u0265\3\2\2\2\u0267\u0268\3\2\2\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026c\3\2\2\2")
        buf.write("\u026a\u026c\7\67\2\2\u026b\u0232\3\2\2\2\u026b\u023a")
        buf.write("\3\2\2\2\u026b\u0242\3\2\2\2\u026b\u024a\3\2\2\2\u026b")
        buf.write("\u0252\3\2\2\2\u026b\u025a\3\2\2\2\u026b\u0262\3\2\2\2")
        buf.write("\u026b\u026a\3\2\2\2\u026cS\3\2\2\2\u026d\u026e\7\67\2")
        buf.write("\2\u026eU\3\2\2\2\u026f\u0270\7\67\2\2\u0270\u0271\5X")
        buf.write("-\2\u0271W\3\2\2\2\u0272\u0273\7-\2\2\u0273\u0274\7\67")
        buf.write("\2\2\u0274\u027d\5X-\2\u0275\u0276\7\62\2\2\u0276\u0277")
        buf.write("\5 \21\2\u0277\u0278\7\63\2\2\u0278\u0279\5X-\2\u0279")
        buf.write("\u027d\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u027d\5\u0092")
        buf.write("J\2\u027c\u0272\3\2\2\2\u027c\u0275\3\2\2\2\u027c\u027a")
        buf.write("\3\2\2\2\u027c\u027b\3\2\2\2\u027dY\3\2\2\2\u027e\u027f")
        buf.write("\7-\2\2\u027f\u0280\7\67\2\2\u0280\u0284\5Z.\2\u0281\u0284")
        buf.write("\3\2\2\2\u0282\u0284\5\u0082B\2\u0283\u027e\3\2\2\2\u0283")
        buf.write("\u0281\3\2\2\2\u0283\u0282\3\2\2\2\u0284[\3\2\2\2\u0285")
        buf.write("\u0289\5^\60\2\u0286\u0288\5d\63\2\u0287\u0286\3\2\2\2")
        buf.write("\u0288\u028b\3\2\2\2\u0289\u0287\3\2\2\2\u0289\u028a\3")
        buf.write("\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u028e")
        buf.write("\5`\61\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("]\3\2\2\2\u028f\u0290\7\4\2\2\u0290\u0291\7.\2\2\u0291")
        buf.write("\u0292\5 \21\2\u0292\u0296\7/\2\2\u0293\u0295\7?\2\2\u0294")
        buf.write("\u0293\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3\2\2\2")
        buf.write("\u0296\u0297\3\2\2\2\u0297\u0299\3\2\2\2\u0298\u0296\3")
        buf.write("\2\2\2\u0299\u029a\5f\64\2\u029a_\3\2\2\2\u029b\u029f")
        buf.write("\7\5\2\2\u029c\u029e\7?\2\2\u029d\u029c\3\2\2\2\u029e")
        buf.write("\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a2\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a3\5")
        buf.write("b\62\2\u02a3a\3\2\2\2\u02a4\u02a8\7\60\2\2\u02a5\u02a7")
        buf.write("\7?\2\2\u02a6\u02a5\3\2\2\2\u02a7\u02aa\3\2\2\2\u02a8")
        buf.write("\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02ab\3\2\2\2")
        buf.write("\u02aa\u02a8\3\2\2\2\u02ab\u02af\5\u0098M\2\u02ac\u02ae")
        buf.write("\7?\2\2\u02ad\u02ac\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2")
        buf.write("\u02b1\u02af\3\2\2\2\u02b2\u02b3\7\61\2\2\u02b3c\3\2\2")
        buf.write("\2\u02b4\u02b5\7\5\2\2\u02b5\u02b6\7\4\2\2\u02b6\u02b7")
        buf.write("\7.\2\2\u02b7\u02b8\5 \21\2\u02b8\u02bc\7/\2\2\u02b9\u02bb")
        buf.write("\7?\2\2\u02ba\u02b9\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc")
        buf.write("\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\3\2\2\2")
        buf.write("\u02be\u02bc\3\2\2\2\u02bf\u02c0\5f\64\2\u02c0e\3\2\2")
        buf.write("\2\u02c1\u02c5\7\60\2\2\u02c2\u02c4\7?\2\2\u02c3\u02c2")
        buf.write("\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6\u02c8\3\2\2\2\u02c7\u02c5\3\2\2\2")
        buf.write("\u02c8\u02c9\5H%\2\u02c9\u02ca\7\61\2\2\u02cag\3\2\2\2")
        buf.write("\u02cb\u02cc\7\4\2\2\u02cc\u02cd\7.\2\2\u02cd\u02ce\5")
        buf.write(" \21\2\u02ce\u02d2\7/\2\2\u02cf\u02d1\7?\2\2\u02d0\u02cf")
        buf.write("\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2")
        buf.write("\u02d3\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d2\3\2\2\2")
        buf.write("\u02d5\u02d6\5l\67\2\u02d6\u02d7\7\5\2\2\u02d7\u02d8\5")
        buf.write("h\65\2\u02d8\u02fe\3\2\2\2\u02d9\u02da\7\4\2\2\u02da\u02db")
        buf.write("\7.\2\2\u02db\u02dc\5 \21\2\u02dc\u02e0\7/\2\2\u02dd\u02df")
        buf.write("\7?\2\2\u02de\u02dd\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0")
        buf.write("\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e3\3\2\2\2")
        buf.write("\u02e2\u02e0\3\2\2\2\u02e3\u02ee\5l\67\2\u02e4\u02e8\7")
        buf.write("\5\2\2\u02e5\u02e7\7?\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02ea")
        buf.write("\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9")
        buf.write("\u02eb\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02ed\5n8\2\u02ec")
        buf.write("\u02e4\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2")
        buf.write("\u02ee\u02ef\3\2\2\2\u02ef\u02fe\3\2\2\2\u02f0\u02ee\3")
        buf.write("\2\2\2\u02f1\u02f2\7\4\2\2\u02f2\u02f3\7.\2\2\u02f3\u02f4")
        buf.write("\5 \21\2\u02f4\u02f8\7/\2\2\u02f5\u02f7\7?\2\2\u02f6\u02f5")
        buf.write("\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8")
        buf.write("\u02f9\3\2\2\2\u02f9\u02fb\3\2\2\2\u02fa\u02f8\3\2\2\2")
        buf.write("\u02fb\u02fc\5n8\2\u02fc\u02fe\3\2\2\2\u02fd\u02cb\3\2")
        buf.write("\2\2\u02fd\u02d9\3\2\2\2\u02fd\u02f1\3\2\2\2\u02fei\3")
        buf.write("\2\2\2\u02ff\u0303\7\60\2\2\u0300\u0302\7?\2\2\u0301\u0300")
        buf.write("\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3\2\2\2\u0303")
        buf.write("\u0304\3\2\2\2\u0304\u0309\3\2\2\2\u0305\u0303\3\2\2\2")
        buf.write("\u0306\u0308\5H%\2\u0307\u0306\3\2\2\2\u0308\u030b\3\2")
        buf.write("\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030c")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u0310\7\61\2\2\u030d")
        buf.write("\u030f\t\b\2\2\u030e\u030d\3\2\2\2\u030f\u0312\3\2\2\2")
        buf.write("\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311k\3\2\2")
        buf.write("\2\u0312\u0310\3\2\2\2\u0313\u0317\7\60\2\2\u0314\u0316")
        buf.write("\7?\2\2\u0315\u0314\3\2\2\2\u0316\u0319\3\2\2\2\u0317")
        buf.write("\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031d\3\2\2\2")
        buf.write("\u0319\u0317\3\2\2\2\u031a\u031c\5H%\2\u031b\u031a\3\2")
        buf.write("\2\2\u031c\u031f\3\2\2\2\u031d\u031b\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2\u0320")
        buf.write("\u0322\t\b\2\2\u0321\u0320\3\2\2\2\u0321\u0322\3\2\2\2")
        buf.write("\u0322\u0323\3\2\2\2\u0323\u0324\7\61\2\2\u0324m\3\2\2")
        buf.write("\2\u0325\u0329\7\60\2\2\u0326\u0328\7?\2\2\u0327\u0326")
        buf.write("\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\u032f\3\2\2\2\u032b\u0329\3\2\2\2")
        buf.write("\u032c\u032e\5H%\2\u032d\u032c\3\2\2\2\u032e\u0331\3\2")
        buf.write("\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332")
        buf.write("\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0334\7\61\2\2\u0333")
        buf.write("\u0335\7?\2\2\u0334\u0333\3\2\2\2\u0335\u0336\3\2\2\2")
        buf.write("\u0336\u0334\3\2\2\2\u0336\u0337\3\2\2\2\u0337o\3\2\2")
        buf.write("\2\u0338\u0339\7\6\2\2\u0339\u033a\5 \21\2\u033a\u033b")
        buf.write("\5j\66\2\u033b\u0371\3\2\2\2\u033c\u033e\7\6\2\2\u033d")
        buf.write("\u033f\7\21\2\2\u033e\u033d\3\2\2\2\u033e\u033f\3\2\2")
        buf.write("\2\u033f\u0340\3\2\2\2\u0340\u0341\5R*\2\u0341\u0343\5")
        buf.write(" \21\2\u0342\u0344\t\b\2\2\u0343\u0342\3\2\2\2\u0344\u0345")
        buf.write("\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u0348\7\67\2\2\u0348\u0349\t\t\2")
        buf.write("\2\u0349\u034a\5 \21\2\u034a\u034b\5j\66\2\u034b\u0371")
        buf.write("\3\2\2\2\u034c\u034e\7\6\2\2\u034d\u034f\7\21\2\2\u034e")
        buf.write("\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2")
        buf.write("\u0350\u0351\5R*\2\u0351\u0352\7\66\2\2\u0352\u0354\7")
        buf.write("\67\2\2\u0353\u0355\7,\2\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0358\7\24\2\2\u0357")
        buf.write("\u0359\5\4\3\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359\u035b\3\2\2\2\u035a\u035c\7\67\2\2\u035b\u035a")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2\u035d")
        buf.write("\u035f\5\u0092J\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2")
        buf.write("\2\2\u035f\u0360\3\2\2\2\u0360\u0361\5j\66\2\u0361\u0371")
        buf.write("\3\2\2\2\u0362\u0363\7\6\2\2\u0363\u0364\7\21\2\2\u0364")
        buf.write("\u0365\5P)\2\u0365\u0367\5 \21\2\u0366\u0368\t\b\2\2\u0367")
        buf.write("\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\7")
        buf.write("\67\2\2\u036c\u036d\t\t\2\2\u036d\u036e\5 \21\2\u036e")
        buf.write("\u036f\5j\66\2\u036f\u0371\3\2\2\2\u0370\u0338\3\2\2\2")
        buf.write("\u0370\u033c\3\2\2\2\u0370\u034c\3\2\2\2\u0370\u0362\3")
        buf.write("\2\2\2\u0371q\3\2\2\2\u0372\u0374\7\23\2\2\u0373\u0375")
        buf.write("\t\b\2\2\u0374\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377s\3\2\2\2\u0378")
        buf.write("\u037a\7\22\2\2\u0379\u037b\t\b\2\2\u037a\u0379\3\2\2")
        buf.write("\2\u037b\u037c\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d")
        buf.write("\3\2\2\2\u037du\3\2\2\2\u037e\u0380\5\62\32\2\u037f\u0381")
        buf.write("\t\b\2\2\u0380\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382")
        buf.write("\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383w\3\2\2\2\u0384")
        buf.write("\u0385\7\7\2\2\u0385\u0387\5 \21\2\u0386\u0388\t\b\2\2")
        buf.write("\u0387\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u0387\3")
        buf.write("\2\2\2\u0389\u038a\3\2\2\2\u038a\u0392\3\2\2\2\u038b\u038d")
        buf.write("\7\7\2\2\u038c\u038e\t\b\2\2\u038d\u038c\3\2\2\2\u038e")
        buf.write("\u038f\3\2\2\2\u038f\u038d\3\2\2\2\u038f\u0390\3\2\2\2")
        buf.write("\u0390\u0392\3\2\2\2\u0391\u0384\3\2\2\2\u0391\u038b\3")
        buf.write("\2\2\2\u0392y\3\2\2\2\u0393\u039a\5\u008aF\2\u0394\u039a")
        buf.write("\5\u0080A\2\u0395\u039a\5\u0084C\2\u0396\u039a\5\u009c")
        buf.write("O\2\u0397\u039a\5\u00a6T\2\u0398\u039a\5\u00acW\2\u0399")
        buf.write("\u0393\3\2\2\2\u0399\u0394\3\2\2\2\u0399\u0395\3\2\2\2")
        buf.write("\u0399\u0396\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u0398\3")
        buf.write("\2\2\2\u039a{\3\2\2\2\u039b\u03a2\5\u0080A\2\u039c\u03a2")
        buf.write("\5\u0086D\2\u039d\u03a2\5\u008aF\2\u039e\u03a2\5\u009c")
        buf.write("O\2\u039f\u03a2\5\u00a6T\2\u03a0\u03a2\5\u00acW\2\u03a1")
        buf.write("\u039b\3\2\2\2\u03a1\u039c\3\2\2\2\u03a1\u039d\3\2\2\2")
        buf.write("\u03a1\u039e\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a0\3")
        buf.write("\2\2\2\u03a2}\3\2\2\2\u03a3\u03a8\5\u0080A\2\u03a4\u03a8")
        buf.write("\5\u0084C\2\u03a5\u03a8\5\u00a6T\2\u03a6\u03a8\5\u00ac")
        buf.write("W\2\u03a7\u03a3\3\2\2\2\u03a7\u03a4\3\2\2\2\u03a7\u03a5")
        buf.write("\3\2\2\2\u03a7\u03a6\3\2\2\2\u03a8\177\3\2\2\2\u03a9\u03aa")
        buf.write("\7\21\2\2\u03aa\u03ab\7\67\2\2\u03ab\u03ac\5\u0082B\2")
        buf.write("\u03ac\u03ad\7&\2\2\u03ad\u03af\5 \21\2\u03ae\u03b0\t")
        buf.write("\b\2\2\u03af\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03af")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03e4\3\2\2\2\u03b3")
        buf.write("\u03b4\7\21\2\2\u03b4\u03b5\7\67\2\2\u03b5\u03b6\7&\2")
        buf.write("\2\u03b6\u03b8\5 \21\2\u03b7\u03b9\t\b\2\2\u03b8\u03b7")
        buf.write("\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03e4\3\2\2\2\u03bc\u03bd\7\21\2")
        buf.write("\2\u03bd\u03be\7\67\2\2\u03be\u03c0\5\u0082B\2\u03bf\u03c1")
        buf.write("\t\b\2\2\u03c0\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03e4\3\2\2\2")
        buf.write("\u03c4\u03c5\7\21\2\2\u03c5\u03c6\7\67\2\2\u03c6\u03c7")
        buf.write("\5\u0082B\2\u03c7\u03c8\7&\2\2\u03c8\u03c9\7\67\2\2\u03c9")
        buf.write("\u03cb\5 \21\2\u03ca\u03cc\t\b\2\2\u03cb\u03ca\3\2\2\2")
        buf.write("\u03cc\u03cd\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3")
        buf.write("\2\2\2\u03ce\u03e4\3\2\2\2\u03cf\u03d0\7\21\2\2\u03d0")
        buf.write("\u03d1\7\67\2\2\u03d1\u03d2\5\u0092J\2\u03d2\u03d3\5\u0082")
        buf.write("B\2\u03d3\u03d4\7&\2\2\u03d4\u03d6\5 \21\2\u03d5\u03d7")
        buf.write("\t\b\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03e4\3\2\2\2")
        buf.write("\u03da\u03db\7\21\2\2\u03db\u03dc\7\67\2\2\u03dc\u03dd")
        buf.write("\5\u0092J\2\u03dd\u03df\5\u0082B\2\u03de\u03e0\t\b\2\2")
        buf.write("\u03df\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03df\3")
        buf.write("\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e4\3\2\2\2\u03e3\u03a9")
        buf.write("\3\2\2\2\u03e3\u03b3\3\2\2\2\u03e3\u03bc\3\2\2\2\u03e3")
        buf.write("\u03c4\3\2\2\2\u03e3\u03cf\3\2\2\2\u03e3\u03da\3\2\2\2")
        buf.write("\u03e4\u0081\3\2\2\2\u03e5\u03e6\t\n\2\2\u03e6\u0083\3")
        buf.write("\2\2\2\u03e7\u03e8\7\20\2\2\u03e8\u03e9\7\67\2\2\u03e9")
        buf.write("\u03ea\7&\2\2\u03ea\u03ec\5\u0088E\2\u03eb\u03ed\t\b\2")
        buf.write("\2\u03ec\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ec")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u0085\3\2\2\2\u03f0")
        buf.write("\u03f1\7\20\2\2\u03f1\u03f2\7\67\2\2\u03f2\u03f3\7&\2")
        buf.write("\2\u03f3\u03f5\5\u0088E\2\u03f4\u03f6\t\b\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u0087\3\2\2\2\u03f9\u03fa\5 \21\2")
        buf.write("\u03fa\u0089\3\2\2\2\u03fb\u03fc\7\b\2\2\u03fc\u03fd\7")
        buf.write("\67\2\2\u03fd\u03ff\7.\2\2\u03fe\u0400\5\u008cG\2\u03ff")
        buf.write("\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401\3\2\2\2")
        buf.write("\u0401\u0403\7/\2\2\u0402\u0404\5\u0092J\2\u0403\u0402")
        buf.write("\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\3\2\2\2\u0405")
        buf.write("\u0407\7\67\2\2\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2")
        buf.write("\2\u0407\u0408\3\2\2\2\u0408\u0409\5\u0096L\2\u0409\u008b")
        buf.write("\3\2\2\2\u040a\u040b\5\u008eH\2\u040b\u040c\5\u0082B\2")
        buf.write("\u040c\u0412\3\2\2\2\u040d\u040e\5\u008eH\2\u040e\u040f")
        buf.write("\7\66\2\2\u040f\u0410\5\u008cG\2\u0410\u0412\3\2\2\2\u0411")
        buf.write("\u040a\3\2\2\2\u0411\u040d\3\2\2\2\u0412\u008d\3\2\2\2")
        buf.write("\u0413\u0414\7\67\2\2\u0414\u0415\5\u0090I\2\u0415\u008f")
        buf.write("\3\2\2\2\u0416\u041d\5\u0082B\2\u0417\u0418\7\62\2\2\u0418")
        buf.write("\u0419\78\2\2\u0419\u041a\7\63\2\2\u041a\u041d\5\u0090")
        buf.write("I\2\u041b\u041d\3\2\2\2\u041c\u0416\3\2\2\2\u041c\u0417")
        buf.write("\3\2\2\2\u041c\u041b\3\2\2\2\u041d\u0091\3\2\2\2\u041e")
        buf.write("\u0424\5\u0082B\2\u041f\u0421\5\u0094K\2\u0420\u0422\7")
        buf.write("\67\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422")
        buf.write("\u0424\3\2\2\2\u0423\u041e\3\2\2\2\u0423\u041f\3\2\2\2")
        buf.write("\u0424\u0093\3\2\2\2\u0425\u0426\7\62\2\2\u0426\u0427")
        buf.write("\78\2\2\u0427\u0428\7\63\2\2\u0428\u0429\7\62\2\2\u0429")
        buf.write("\u042a\78\2\2\u042a\u042c\7\63\2\2\u042b\u042d\7\67\2")
        buf.write("\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u0438")
        buf.write("\3\2\2\2\u042e\u042f\7\62\2\2\u042f\u0430\78\2\2\u0430")
        buf.write("\u0432\7\63\2\2\u0431\u0433\7\67\2\2\u0432\u0431\3\2\2")
        buf.write("\2\u0432\u0433\3\2\2\2\u0433\u0435\3\2\2\2\u0434\u0436")
        buf.write("\5\u0082B\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436")
        buf.write("\u0438\3\2\2\2\u0437\u0425\3\2\2\2\u0437\u042e\3\2\2\2")
        buf.write("\u0438\u0095\3\2\2\2\u0439\u043d\7\60\2\2\u043a\u043c")
        buf.write("\7?\2\2\u043b\u043a\3\2\2\2\u043c\u043f\3\2\2\2\u043d")
        buf.write("\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0441\3\2\2\2")
        buf.write("\u043f\u043d\3\2\2\2\u0440\u0442\5\u0098M\2\u0441\u0440")
        buf.write("\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443\3\2\2\2\u0443")
        buf.write("\u0445\7\61\2\2\u0444\u0446\t\b\2\2\u0445\u0444\3\2\2")
        buf.write("\2\u0446\u0447\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448")
        buf.write("\3\2\2\2\u0448\u0097\3\2\2\2\u0449\u044a\5H%\2\u044a\u044b")
        buf.write("\5\u0098M\2\u044b\u044e\3\2\2\2\u044c\u044e\5H%\2\u044d")
        buf.write("\u0449\3\2\2\2\u044d\u044c\3\2\2\2\u044e\u0099\3\2\2\2")
        buf.write("\u044f\u0455\5F$\2\u0450\u0451\5F$\2\u0451\u0452\5\u00b2")
        buf.write("Z\2\u0452\u0453\5\u009aN\2\u0453\u0455\3\2\2\2\u0454\u044f")
        buf.write("\3\2\2\2\u0454\u0450\3\2\2\2\u0455\u009b\3\2\2\2\u0456")
        buf.write("\u0457\7\b\2\2\u0457\u0458\7.\2\2\u0458\u0459\5\u00a2")
        buf.write("R\2\u0459\u045b\7/\2\2\u045a\u045c\7\67\2\2\u045b\u045a")
        buf.write("\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d\3\2\2\2\u045d")
        buf.write("\u045f\7.\2\2\u045e\u0460\5\u009eP\2\u045f\u045e\3\2\2")
        buf.write("\2\u045f\u0460\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462")
        buf.write("\7/\2\2\u0462\u0463\5\u0092J\2\u0463\u0464\5\u0096L\2")
        buf.write("\u0464\u04a7\3\2\2\2\u0465\u0466\7\b\2\2\u0466\u0467\7")
        buf.write(".\2\2\u0467\u0468\5\u00a2R\2\u0468\u046a\7/\2\2\u0469")
        buf.write("\u046b\7\67\2\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2")
        buf.write("\2\u046b\u046c\3\2\2\2\u046c\u046e\7.\2\2\u046d\u046f")
        buf.write("\5\u009eP\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f")
        buf.write("\u0470\3\2\2\2\u0470\u0471\7/\2\2\u0471\u0472\7\67\2\2")
        buf.write("\u0472\u0473\5\u0096L\2\u0473\u04a7\3\2\2\2\u0474\u0475")
        buf.write("\7\b\2\2\u0475\u0476\7.\2\2\u0476\u0477\5\u00a2R\2\u0477")
        buf.write("\u0479\7/\2\2\u0478\u047a\7\67\2\2\u0479\u0478\3\2\2\2")
        buf.write("\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c\7")
        buf.write(".\2\2\u047c\u047d\5\u009eP\2\u047d\u047e\7/\2\2\u047e")
        buf.write("\u047f\5\u0096L\2\u047f\u04a7\3\2\2\2\u0480\u0481\7\b")
        buf.write("\2\2\u0481\u0482\7.\2\2\u0482\u0483\5\u00a2R\2\u0483\u0485")
        buf.write("\7/\2\2\u0484\u0486\7\67\2\2\u0485\u0484\3\2\2\2\u0485")
        buf.write("\u0486\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\7.\2\2")
        buf.write("\u0488\u0489\5\u009eP\2\u0489\u048a\7/\2\2\u048a\u048b")
        buf.write("\5\u0096L\2\u048b\u04a7\3\2\2\2\u048c\u048d\7\b\2\2\u048d")
        buf.write("\u048e\7.\2\2\u048e\u048f\5\u00a2R\2\u048f\u0491\7/\2")
        buf.write("\2\u0490\u0492\7\67\2\2\u0491\u0490\3\2\2\2\u0491\u0492")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7.\2\2\u0494")
        buf.write("\u0495\7/\2\2\u0495\u0496\5\u0096L\2\u0496\u04a7\3\2\2")
        buf.write("\2\u0497\u0498\7\b\2\2\u0498\u0499\7\67\2\2\u0499\u049a")
        buf.write("\7.\2\2\u049a\u049b\7/\2\2\u049b\u04a7\5\u0096L\2\u049c")
        buf.write("\u049d\7\b\2\2\u049d\u049e\7.\2\2\u049e\u049f\5\u00a4")
        buf.write("S\2\u049f\u04a0\7/\2\2\u04a0\u04a1\7\67\2\2\u04a1\u04a2")
        buf.write("\7.\2\2\u04a2\u04a3\7/\2\2\u04a3\u04a4\5\u0092J\2\u04a4")
        buf.write("\u04a5\5\u0096L\2\u04a5\u04a7\3\2\2\2\u04a6\u0456\3\2")
        buf.write("\2\2\u04a6\u0465\3\2\2\2\u04a6\u0474\3\2\2\2\u04a6\u0480")
        buf.write("\3\2\2\2\u04a6\u048c\3\2\2\2\u04a6\u0497\3\2\2\2\u04a6")
        buf.write("\u049c\3\2\2\2\u04a7\u009d\3\2\2\2\u04a8\u04ad\5\u00a0")
        buf.write("Q\2\u04a9\u04aa\7\66\2\2\u04aa\u04ac\5\u00a0Q\2\u04ab")
        buf.write("\u04a9\3\2\2\2\u04ac\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2")
        buf.write("\u04ad\u04ae\3\2\2\2\u04ae\u009f\3\2\2\2\u04af\u04ad\3")
        buf.write("\2\2\2\u04b0\u04b2\7\67\2\2\u04b1\u04b3\5\u0092J\2\u04b2")
        buf.write("\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u00a1\3\2\2\2")
        buf.write("\u04b4\u04b6\7\67\2\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6")
        buf.write("\3\2\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b9\7\67\2\2\u04b8")
        buf.write("\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u00a3\3\2\2\2")
        buf.write("\u04ba\u04bb\7\67\2\2\u04bb\u04bc\7\67\2\2\u04bc\u00a5")
        buf.write("\3\2\2\2\u04bd\u04be\7\t\2\2\u04be\u04bf\7\67\2\2\u04bf")
        buf.write("\u04c0\7\n\2\2\u04c0\u04c4\7\60\2\2\u04c1\u04c3\7?\2\2")
        buf.write("\u04c2\u04c1\3\2\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c2\3")
        buf.write("\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4")
        buf.write("\3\2\2\2\u04c7\u04c9\5\u00aaV\2\u04c8\u04c7\3\2\2\2\u04c9")
        buf.write("\u04ca\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2")
        buf.write("\u04cb\u04cf\3\2\2\2\u04cc\u04ce\7?\2\2\u04cd\u04cc\3")
        buf.write("\2\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0")
        buf.write("\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2")
        buf.write("\u04d3\7\61\2\2\u04d3\u04d4\t\b\2\2\u04d4\u00a7\3\2\2")
        buf.write("\2\u04d5\u04da\5\u00aaV\2\u04d6\u04d7\t\b\2\2\u04d7\u04d9")
        buf.write("\5\u00aaV\2\u04d8\u04d6\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da")
        buf.write("\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dd\3\2\2\2")
        buf.write("\u04dc\u04da\3\2\2\2\u04dd\u04de\7\64\2\2\u04de\u04e1")
        buf.write("\3\2\2\2\u04df\u04e1\5\u0092J\2\u04e0\u04d5\3\2\2\2\u04e0")
        buf.write("\u04df\3\2\2\2\u04e1\u00a9\3\2\2\2\u04e2\u04e3\7\67\2")
        buf.write("\2\u04e3\u04e5\5\u0092J\2\u04e4\u04e6\t\b\2\2\u04e5\u04e4")
        buf.write("\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7")
        buf.write("\u04e8\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04eb\5~@\2\u04ea")
        buf.write("\u04e2\3\2\2\2\u04ea\u04e9\3\2\2\2\u04eb\u00ab\3\2\2\2")
        buf.write("\u04ec\u04ed\7\t\2\2\u04ed\u04ee\7\67\2\2\u04ee\u04ef")
        buf.write("\7\13\2\2\u04ef\u04f3\7\60\2\2\u04f0\u04f2\7?\2\2\u04f1")
        buf.write("\u04f0\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3\u04f1\3\2\2\2")
        buf.write("\u04f3\u04f4\3\2\2\2\u04f4\u04f7\3\2\2\2\u04f5\u04f3\3")
        buf.write("\2\2\2\u04f6\u04f8\5\u00b4[\2\u04f7\u04f6\3\2\2\2\u04f8")
        buf.write("\u04f9\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2")
        buf.write("\u04fa\u04fe\3\2\2\2\u04fb\u04fd\7?\2\2\u04fc\u04fb\3")
        buf.write("\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff")
        buf.write("\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u04fe\3\2\2\2\u0501")
        buf.write("\u0503\7\61\2\2\u0502\u0504\t\b\2\2\u0503\u0502\3\2\2")
        buf.write("\2\u0504\u0505\3\2\2\2\u0505\u0503\3\2\2\2\u0505\u0506")
        buf.write("\3\2\2\2\u0506\u00ad\3\2\2\2\u0507\u050b\3\2\2\2\u0508")
        buf.write("\u0509\7?\2\2\u0509\u050b\5\u00aeX\2\u050a\u0507\3\2\2")
        buf.write("\2\u050a\u0508\3\2\2\2\u050b\u00af\3\2\2\2\u050c\u050d")
        buf.write("\5\u00b4[\2\u050d\u00b1\3\2\2\2\u050e\u0512\7?\2\2\u050f")
        buf.write("\u0510\7?\2\2\u0510\u0512\5\u00b2Z\2\u0511\u050e\3\2\2")
        buf.write("\2\u0511\u050f\3\2\2\2\u0512\u00b3\3\2\2\2\u0513\u0514")
        buf.write("\7\67\2\2\u0514\u0516\7.\2\2\u0515\u0517\5\u008cG\2\u0516")
        buf.write("\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2")
        buf.write("\u0518\u051a\7/\2\2\u0519\u051b\5\u0092J\2\u051a\u0519")
        buf.write("\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051d\3\2\2\2\u051c")
        buf.write("\u051e\t\b\2\2\u051d\u051c\3\2\2\2\u051e\u051f\3\2\2\2")
        buf.write("\u051f\u051d\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u00b5\3")
        buf.write("\2\2\2\u0521\u0522\7\67\2\2\u0522\u0524\7.\2\2\u0523\u0525")
        buf.write("\5\u008cG\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2\u0525")
        buf.write("\u0526\3\2\2\2\u0526\u0528\7/\2\2\u0527\u0529\5\u0092")
        buf.write("J\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052b")
        buf.write("\3\2\2\2\u052a\u052c\7\64\2\2\u052b\u052a\3\2\2\2\u052b")
        buf.write("\u052c\3\2\2\2\u052c\u00b7\3\2\2\2\u0098\u00bb\u00c1\u00c3")
        buf.write("\u00d3\u00e0\u00ed\u00fe\u010e\u0114\u011d\u0124\u012d")
        buf.write("\u0138\u0144\u014f\u015a\u0165\u0170\u017b\u0181\u018d")
        buf.write("\u0195\u019c\u01a7\u01af\u01b4\u01bf\u01c6\u01ca\u01d0")
        buf.write("\u01da\u01e4\u01ed\u01f1\u01f5\u01fd\u0205\u020d\u0215")
        buf.write("\u021d\u0225\u022d\u0230\u0238\u0240\u0248\u0250\u0258")
        buf.write("\u0260\u0268\u026b\u027c\u0283\u0289\u028d\u0296\u029f")
        buf.write("\u02a8\u02af\u02bc\u02c5\u02d2\u02e0\u02e8\u02ee\u02f8")
        buf.write("\u02fd\u0303\u0309\u0310\u0317\u031d\u0321\u0329\u032f")
        buf.write("\u0336\u033e\u0345\u034e\u0354\u0358\u035b\u035e\u0369")
        buf.write("\u0370\u0376\u037c\u0382\u0389\u038f\u0391\u0399\u03a1")
        buf.write("\u03a7\u03b1\u03ba\u03c2\u03cd\u03d8\u03e1\u03e3\u03ee")
        buf.write("\u03f7\u03ff\u0403\u0406\u0411\u041c\u0421\u0423\u042c")
        buf.write("\u0432\u0435\u0437\u043d\u0441\u0447\u044d\u0454\u045b")
        buf.write("\u045f\u046a\u046e\u0479\u0485\u0491\u04a6\u04ad\u04b2")
        buf.write("\u04b5\u04b8\u04c4\u04ca\u04cf\u04da\u04e0\u04e7\u04ea")
        buf.write("\u04f3\u04f9\u04fe\u0505\u050a\u0511\u0516\u051a\u051f")
        buf.write("\u0524\u0528\u052b")
        return buf.getvalue()


class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'str'", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
                     "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "':='", "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "';'", "':'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "IF", "ELSE", "FOR", "RETURN", 
                      "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                      "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                      "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
                      "DIV", "MOD", "EQUAL", "NOTEQUAL", "LESS", "LESSEQUAL", 
                      "GREATER", "GREATEREQUAL", "AND", "OR", "NOT", "ASSIGN", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "COLON_ASSIGN", "DOT", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COLON", 
                      "COMMA", "ID", "INT_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
                      "REAL", "ILLEGAL_ESCAPE", "STRING_LIT", "NEWLINE", 
                      "WS", "MULTI_COMMENT", "LINE_COMMENT", "UNCLOSE_STRING", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_literal = 1
    RULE_literal1 = 2
    RULE_literal3 = 3
    RULE_literal4 = 4
    RULE_array_literal = 5
    RULE_array_literal_rest = 6
    RULE_arraySupport = 7
    RULE_literal3List = 8
    RULE_struct_literalSP = 9
    RULE_struct_literal = 10
    RULE_struct_literal3 = 11
    RULE_field_init_list = 12
    RULE_field_init = 13
    RULE_list_expression = 14
    RULE_expression = 15
    RULE_logicalOrExpr = 16
    RULE_logicalAndExpr = 17
    RULE_equalityExpr = 18
    RULE_relationalExpr = 19
    RULE_additiveExpr = 20
    RULE_multiplicativeExpr = 21
    RULE_unaryExpr = 22
    RULE_primaryExpr = 23
    RULE_primaryExpr1 = 24
    RULE_postfixOps = 25
    RULE_basePrimary = 26
    RULE_basePrimary1 = 27
    RULE_postfixOp = 28
    RULE_arrayAccess = 29
    RULE_memberAccess = 30
    RULE_functionCall = 31
    RULE_argumentList = 32
    RULE_list_statement = 33
    RULE_statement = 34
    RULE_statement2 = 35
    RULE_statement3 = 36
    RULE_declared_statement = 37
    RULE_declared_statement2 = 38
    RULE_assign_statement = 39
    RULE_assign_statement2 = 40
    RULE_assignable2 = 41
    RULE_assignable = 42
    RULE_tail = 43
    RULE_tail2 = 44
    RULE_if_block = 45
    RULE_if_statement1 = 46
    RULE_else_statement = 47
    RULE_bodyBLOCK = 48
    RULE_else_if_statement = 49
    RULE_conditional_body_block = 50
    RULE_if_statement = 51
    RULE_block = 52
    RULE_blockIF = 53
    RULE_blockIF2 = 54
    RULE_for_statement = 55
    RULE_break_statement = 56
    RULE_continue_statement = 57
    RULE_call_statement = 58
    RULE_return_statement = 59
    RULE_declared = 60
    RULE_declared2 = 61
    RULE_declared3 = 62
    RULE_variables_declared = 63
    RULE_type_spec = 64
    RULE_constants_declared = 65
    RULE_constants_declared2 = 66
    RULE_constant_expression = 67
    RULE_function_declared = 68
    RULE_parameter_list = 69
    RULE_parameter = 70
    RULE_parameter_type = 71
    RULE_return_type = 72
    RULE_array_type = 73
    RULE_function_body = 74
    RULE_statement_with_newlines = 75
    RULE_statement_list = 76
    RULE_method_declared = 77
    RULE_parameter_list2 = 78
    RULE_parameter2 = 79
    RULE_receiver = 80
    RULE_receiver2 = 81
    RULE_struct_declared = 82
    RULE_field_list = 83
    RULE_field = 84
    RULE_interface_declared = 85
    RULE_optional_newlines = 86
    RULE_method_list = 87
    RULE_recursive_newlines = 88
    RULE_method_decl = 89
    RULE_method_signature = 90

    ruleNames =  [ "program", "literal", "literal1", "literal3", "literal4", 
                   "array_literal", "array_literal_rest", "arraySupport", 
                   "literal3List", "struct_literalSP", "struct_literal", 
                   "struct_literal3", "field_init_list", "field_init", "list_expression", 
                   "expression", "logicalOrExpr", "logicalAndExpr", "equalityExpr", 
                   "relationalExpr", "additiveExpr", "multiplicativeExpr", 
                   "unaryExpr", "primaryExpr", "primaryExpr1", "postfixOps", 
                   "basePrimary", "basePrimary1", "postfixOp", "arrayAccess", 
                   "memberAccess", "functionCall", "argumentList", "list_statement", 
                   "statement", "statement2", "statement3", "declared_statement", 
                   "declared_statement2", "assign_statement", "assign_statement2", 
                   "assignable2", "assignable", "tail", "tail2", "if_block", 
                   "if_statement1", "else_statement", "bodyBLOCK", "else_if_statement", 
                   "conditional_body_block", "if_statement", "block", "blockIF", 
                   "blockIF2", "for_statement", "break_statement", "continue_statement", 
                   "call_statement", "return_statement", "declared", "declared2", 
                   "declared3", "variables_declared", "type_spec", "constants_declared", 
                   "constants_declared2", "constant_expression", "function_declared", 
                   "parameter_list", "parameter", "parameter_type", "return_type", 
                   "array_type", "function_body", "statement_with_newlines", 
                   "statement_list", "method_declared", "parameter_list2", 
                   "parameter2", "receiver", "receiver2", "struct_declared", 
                   "field_list", "field", "interface_declared", "optional_newlines", 
                   "method_list", "recursive_newlines", "method_decl", "method_signature" ]

    EOF = Token.EOF
    T__0=1
    IF=2
    ELSE=3
    FOR=4
    RETURN=5
    FUNC=6
    TYPE=7
    STRUCT=8
    INTERFACE=9
    STRING=10
    INT=11
    FLOAT=12
    BOOLEAN=13
    CONST=14
    VAR=15
    CONTINUE=16
    BREAK=17
    RANGE=18
    NIL=19
    TRUE=20
    FALSE=21
    ADD=22
    SUB=23
    MUL=24
    DIV=25
    MOD=26
    EQUAL=27
    NOTEQUAL=28
    LESS=29
    LESSEQUAL=30
    GREATER=31
    GREATEREQUAL=32
    AND=33
    OR=34
    NOT=35
    ASSIGN=36
    ADD_ASSIGN=37
    SUB_ASSIGN=38
    MUL_ASSIGN=39
    DIV_ASSIGN=40
    MOD_ASSIGN=41
    COLON_ASSIGN=42
    DOT=43
    LPAREN=44
    RPAREN=45
    LBRACE=46
    RBRACE=47
    LBRACK=48
    RBRACK=49
    SEMI=50
    COLON=51
    COMMA=52
    ID=53
    INT_LIT=54
    BIN_LIT=55
    OCT_LIT=56
    HEX_LIT=57
    REAL=58
    ILLEGAL_ESCAPE=59
    STRING_LIT=60
    NEWLINE=61
    WS=62
    MULTI_COMMENT=63
    LINE_COMMENT=64
    UNCLOSE_STRING=65
    ERROR_CHAR=66

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclaredContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclaredContext,i)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 182
                self.match(MiniGoParser.NEWLINE)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.declared()
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.FUNC) | (1 << MiniGoParser.TYPE) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.NEWLINE))) != 0):
                self.state = 191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.FUNC, MiniGoParser.TYPE, MiniGoParser.CONST, MiniGoParser.VAR]:
                    self.state = 189
                    self.declared()
                    pass
                elif token in [MiniGoParser.NEWLINE]:
                    self.state = 190
                    self.match(MiniGoParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_literal)
        try:
            self.state = 209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [MiniGoParser.REAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.match(MiniGoParser.REAL)
                pass
            elif token in [MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [MiniGoParser.HEX_LIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(MiniGoParser.HEX_LIT)
                pass
            elif token in [MiniGoParser.OCT_LIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 202
                self.match(MiniGoParser.OCT_LIT)
                pass
            elif token in [MiniGoParser.TRUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 203
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [MiniGoParser.FALSE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 204
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [MiniGoParser.LBRACK]:
                self.enterOuterAlt(localctx, 8)
                self.state = 205
                self.array_literal()
                pass
            elif token in [MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 9)
                self.state = 206
                self.struct_literal()
                pass
            elif token in [MiniGoParser.BIN_LIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 207
                self.match(MiniGoParser.BIN_LIT)
                pass
            elif token in [MiniGoParser.NIL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 208
                self.match(MiniGoParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral1" ):
                return visitor.visitLiteral1(self)
            else:
                return visitor.visitChildren(self)




    def literal1(self):

        localctx = MiniGoParser.Literal1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_literal1)
        try:
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [MiniGoParser.REAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.match(MiniGoParser.REAL)
                pass
            elif token in [MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 213
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [MiniGoParser.HEX_LIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 214
                self.match(MiniGoParser.HEX_LIT)
                pass
            elif token in [MiniGoParser.OCT_LIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 215
                self.match(MiniGoParser.OCT_LIT)
                pass
            elif token in [MiniGoParser.TRUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 216
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [MiniGoParser.FALSE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 217
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [MiniGoParser.LBRACK]:
                self.enterOuterAlt(localctx, 8)
                self.state = 218
                self.array_literal()
                pass
            elif token in [MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 9)
                self.state = 219
                self.struct_literal()
                pass
            elif token in [MiniGoParser.BIN_LIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 220
                self.match(MiniGoParser.BIN_LIT)
                pass
            elif token in [MiniGoParser.NIL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 221
                self.match(MiniGoParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def struct_literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal3Context,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral3" ):
                return visitor.visitLiteral3(self)
            else:
                return visitor.visitChildren(self)




    def literal3(self):

        localctx = MiniGoParser.Literal3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_literal3)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.match(MiniGoParser.INT_LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(MiniGoParser.REAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.match(MiniGoParser.HEX_LIT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 228
                self.match(MiniGoParser.OCT_LIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 229
                self.match(MiniGoParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 230
                self.match(MiniGoParser.FALSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 231
                self.struct_literal3()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 232
                self.match(MiniGoParser.BIN_LIT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 233
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 234
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal4

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral4" ):
                return visitor.visitLiteral4(self)
            else:
                return visitor.visitChildren(self)




    def literal4(self):

        localctx = MiniGoParser.Literal4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_literal4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            _la = self._input.LA(1)
            if not(_la==MiniGoParser.ID or _la==MiniGoParser.INT_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def literal4(self):
            return self.getTypedRuleContext(MiniGoParser.Literal4Context,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def array_literal_rest(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_restContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal" ):
                return visitor.visitArray_literal(self)
            else:
                return visitor.visitChildren(self)




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(MiniGoParser.LBRACK)
            self.state = 240
            self.literal4()
            self.state = 241
            self.match(MiniGoParser.RBRACK)
            self.state = 242
            self.array_literal_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def literal4(self):
            return self.getTypedRuleContext(MiniGoParser.Literal4Context,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def array_literal_rest(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_restContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def arraySupport(self):
            return self.getTypedRuleContext(MiniGoParser.ArraySupportContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_rest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal_rest" ):
                return visitor.visitArray_literal_rest(self)
            else:
                return visitor.visitChildren(self)




    def array_literal_rest(self):

        localctx = MiniGoParser.Array_literal_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_array_literal_rest)
        try:
            self.state = 252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.LBRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(MiniGoParser.LBRACK)
                self.state = 245
                self.literal4()
                self.state = 246
                self.match(MiniGoParser.RBRACK)
                self.state = 247
                self.array_literal_rest()
                pass
            elif token in [MiniGoParser.T__0, MiniGoParser.STRING, MiniGoParser.INT, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.type_spec()
                self.state = 250
                self.arraySupport()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraySupportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def literal3List(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3ListContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arraySupport

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraySupport" ):
                return visitor.visitArraySupport(self)
            else:
                return visitor.visitChildren(self)




    def arraySupport(self):

        localctx = MiniGoParser.ArraySupportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arraySupport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(MiniGoParser.LBRACE)
            self.state = 255
            self.literal3List()
            self.state = 256
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal3ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3Context,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def literal3List(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3ListContext,0)


        def arraySupport(self):
            return self.getTypedRuleContext(MiniGoParser.ArraySupportContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal3List

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral3List" ):
                return visitor.visitLiteral3List(self)
            else:
                return visitor.visitChildren(self)




    def literal3List(self):

        localctx = MiniGoParser.Literal3ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_literal3List)
        try:
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.literal3()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.literal3()
                self.state = 260
                self.match(MiniGoParser.COMMA)
                self.state = 261
                self.literal3List()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 263
                self.arraySupport()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 264
                self.arraySupport()
                self.state = 265
                self.match(MiniGoParser.COMMA)
                self.state = 266
                self.literal3List()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalSPContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3Context,0)


        def field_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_init_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literalSP

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_literalSP" ):
                return visitor.visitStruct_literalSP(self)
            else:
                return visitor.visitChildren(self)




    def struct_literalSP(self):

        localctx = MiniGoParser.Struct_literalSPContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_struct_literalSP)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(MiniGoParser.ID)
            self.state = 271
            self.match(MiniGoParser.LBRACE)
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 272
                self.literal3()
                pass

            elif la_ == 2:
                self.state = 273
                self.field_init_list()
                pass


            self.state = 276
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_literalSP(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalSPContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_literal" ):
                return visitor.visitStruct_literal(self)
            else:
                return visitor.visitChildren(self)




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.struct_literalSP()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_literalSP(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalSPContext,0)


        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LBRACE)
            else:
                return self.getToken(MiniGoParser.LBRACE, i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RBRACE)
            else:
                return self.getToken(MiniGoParser.RBRACE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_literal3" ):
                return visitor.visitStruct_literal3(self)
            else:
                return visitor.visitChildren(self)




    def struct_literal3(self):

        localctx = MiniGoParser.Struct_literal3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_struct_literal3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.LBRACE:
                self.state = 280
                self.match(MiniGoParser.LBRACE)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.struct_literalSP()
            self.state = 290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 287
                    self.match(MiniGoParser.RBRACE) 
                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_init_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_init_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_init_list" ):
                return visitor.visitField_init_list(self)
            else:
                return visitor.visitChildren(self)




    def field_init_list(self):

        localctx = MiniGoParser.Field_init_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_field_init_list)
        try:
            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.field_init()
                self.state = 294
                self.match(MiniGoParser.COMMA)
                self.state = 295
                self.field_init_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.field_init()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_init" ):
                return visitor.visitField_init(self)
            else:
                return visitor.visitChildren(self)




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(MiniGoParser.ID)
            self.state = 302
            self.match(MiniGoParser.COLON)
            self.state = 303
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_expression(self):
            return self.getTypedRuleContext(MiniGoParser.List_expressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_expression" ):
                return visitor.visitList_expression(self)
            else:
                return visitor.visitChildren(self)




    def list_expression(self):

        localctx = MiniGoParser.List_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_list_expression)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.expression()
                self.state = 306
                self.match(MiniGoParser.COMMA)
                self.state = 307
                self.list_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalOrExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = MiniGoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.logicalOrExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalAndExprContext,0)


        def logicalOrExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalOrExprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logicalOrExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpr" ):
                return visitor.visitLogicalOrExpr(self)
            else:
                return visitor.visitChildren(self)



    def logicalOrExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.LogicalOrExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_logicalOrExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.logicalAndExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.LogicalOrExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpr)
                    self.state = 317
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 318
                    self.match(MiniGoParser.OR)
                    self.state = 319
                    self.logicalAndExpr(0) 
                self.state = 324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpr(self):
            return self.getTypedRuleContext(MiniGoParser.EqualityExprContext,0)


        def logicalAndExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalAndExprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logicalAndExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpr" ):
                return visitor.visitLogicalAndExpr(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.LogicalAndExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_logicalAndExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.equalityExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.LogicalAndExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpr)
                    self.state = 328
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 329
                    self.match(MiniGoParser.AND)
                    self.state = 330
                    self.equalityExpr(0) 
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpr(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalExprContext,0)


        def equalityExpr(self):
            return self.getTypedRuleContext(MiniGoParser.EqualityExprContext,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(MiniGoParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_equalityExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpr" ):
                return visitor.visitEqualityExpr(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.EqualityExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_equalityExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.relationalExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.EqualityExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpr)
                    self.state = 339
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 340
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.EQUAL or _la==MiniGoParser.NOTEQUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 341
                    self.relationalExpr(0) 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpr(self):
            return self.getTypedRuleContext(MiniGoParser.AdditiveExprContext,0)


        def relationalExpr(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalExprContext,0)


        def LESS(self):
            return self.getToken(MiniGoParser.LESS, 0)

        def GREATER(self):
            return self.getToken(MiniGoParser.GREATER, 0)

        def LESSEQUAL(self):
            return self.getToken(MiniGoParser.LESSEQUAL, 0)

        def GREATEREQUAL(self):
            return self.getToken(MiniGoParser.GREATEREQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relationalExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpr" ):
                return visitor.visitRelationalExpr(self)
            else:
                return visitor.visitChildren(self)



    def relationalExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.RelationalExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_relationalExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.additiveExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.RelationalExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpr)
                    self.state = 350
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 351
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.LESS) | (1 << MiniGoParser.LESSEQUAL) | (1 << MiniGoParser.GREATER) | (1 << MiniGoParser.GREATEREQUAL))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 352
                    self.additiveExpr(0) 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpr(self):
            return self.getTypedRuleContext(MiniGoParser.MultiplicativeExprContext,0)


        def additiveExpr(self):
            return self.getTypedRuleContext(MiniGoParser.AdditiveExprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additiveExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpr" ):
                return visitor.visitAdditiveExpr(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.AdditiveExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_additiveExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.multiplicativeExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.AdditiveExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpr)
                    self.state = 361
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 362
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.ADD or _la==MiniGoParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 363
                    self.multiplicativeExpr(0) 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.UnaryExprContext,0)


        def multiplicativeExpr(self):
            return self.getTypedRuleContext(MiniGoParser.MultiplicativeExprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicativeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpr" ):
                return visitor.visitMultiplicativeExpr(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.MultiplicativeExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_multiplicativeExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.unaryExpr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.MultiplicativeExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpr)
                    self.state = 372
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 373
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.MUL) | (1 << MiniGoParser.DIV) | (1 << MiniGoParser.MOD))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 374
                    self.unaryExpr() 
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.UnaryExprContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def primaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.PrimaryExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unaryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpr(self):

        localctx = MiniGoParser.UnaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unaryExpr)
        self._la = 0 # Token type
        try:
            self.state = 383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.SUB, MiniGoParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                _la = self._input.LA(1)
                if not(_la==MiniGoParser.SUB or _la==MiniGoParser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 381
                self.unaryExpr()
                pass
            elif token in [MiniGoParser.NIL, MiniGoParser.TRUE, MiniGoParser.FALSE, MiniGoParser.LPAREN, MiniGoParser.LBRACK, MiniGoParser.ID, MiniGoParser.INT_LIT, MiniGoParser.BIN_LIT, MiniGoParser.OCT_LIT, MiniGoParser.HEX_LIT, MiniGoParser.REAL, MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.primaryExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basePrimary(self):
            return self.getTypedRuleContext(MiniGoParser.BasePrimaryContext,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primaryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpr" ):
                return visitor.visitPrimaryExpr(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpr(self):

        localctx = MiniGoParser.PrimaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_primaryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.basePrimary()
            self.state = 386
            self.postfixOps()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basePrimary1(self):
            return self.getTypedRuleContext(MiniGoParser.BasePrimary1Context,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primaryExpr1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpr1" ):
                return visitor.visitPrimaryExpr1(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpr1(self):

        localctx = MiniGoParser.PrimaryExpr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_primaryExpr1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.basePrimary1()
            self.state = 389
            self.postfixOps()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_postfixOps

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixOps" ):
                return visitor.visitPostfixOps(self)
            else:
                return visitor.visitChildren(self)




    def postfixOps(self):

        localctx = MiniGoParser.PostfixOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_postfixOps)
        try:
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.postfixOp()
                self.state = 392
                self.postfixOps()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasePrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal1(self):
            return self.getTypedRuleContext(MiniGoParser.Literal1Context,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_basePrimary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasePrimary" ):
                return visitor.visitBasePrimary(self)
            else:
                return visitor.visitChildren(self)




    def basePrimary(self):

        localctx = MiniGoParser.BasePrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_basePrimary)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.literal1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 399
                self.match(MiniGoParser.LPAREN)
                self.state = 400
                self.expression()
                self.state = 401
                self.match(MiniGoParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasePrimary1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_basePrimary1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasePrimary1" ):
                return visitor.visitBasePrimary1(self)
            else:
                return visitor.visitChildren(self)




    def basePrimary1(self):

        localctx = MiniGoParser.BasePrimary1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_basePrimary1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayAccessContext,0)


        def memberAccess(self):
            return self.getTypedRuleContext(MiniGoParser.MemberAccessContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MiniGoParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_postfixOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixOp" ):
                return visitor.visitPostfixOp(self)
            else:
                return visitor.visitChildren(self)




    def postfixOp(self):

        localctx = MiniGoParser.PostfixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_postfixOp)
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.LBRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.arrayAccess()
                pass
            elif token in [MiniGoParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.memberAccess()
                pass
            elif token in [MiniGoParser.LPAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.functionCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrayAccess

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayAccess" ):
                return visitor.visitArrayAccess(self)
            else:
                return visitor.visitChildren(self)




    def arrayAccess(self):

        localctx = MiniGoParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arrayAccess)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.match(MiniGoParser.LBRACK)
                self.state = 413
                self.expression()
                self.state = 414
                self.match(MiniGoParser.RBRACK)
                self.state = 415
                self.postfixOp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.match(MiniGoParser.LBRACK)
                self.state = 418
                self.expression()
                self.state = 419
                self.match(MiniGoParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayAccessContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_memberAccess

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)




    def memberAccess(self):

        localctx = MiniGoParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_memberAccess)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(MiniGoParser.DOT)
                self.state = 424
                self.match(MiniGoParser.ID)
                self.state = 425
                self.arrayAccess()
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 426
                        self.match(MiniGoParser.NEWLINE) 
                    self.state = 431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(MiniGoParser.DOT)
                self.state = 433
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(MiniGoParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_functionCall

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = MiniGoParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionCall)
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(MiniGoParser.LPAREN)
                self.state = 437
                self.argumentList()
                self.state = 438
                self.match(MiniGoParser.RPAREN)
                self.state = 439
                self.postfixOp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.match(MiniGoParser.LPAREN)
                self.state = 442
                self.argumentList()
                self.state = 443
                self.match(MiniGoParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_argumentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = MiniGoParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.NIL, MiniGoParser.TRUE, MiniGoParser.FALSE, MiniGoParser.SUB, MiniGoParser.NOT, MiniGoParser.LPAREN, MiniGoParser.LBRACK, MiniGoParser.ID, MiniGoParser.INT_LIT, MiniGoParser.BIN_LIT, MiniGoParser.OCT_LIT, MiniGoParser.HEX_LIT, MiniGoParser.REAL, MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.expression()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.COMMA:
                    self.state = 448
                    self.match(MiniGoParser.COMMA)
                    self.state = 449
                    self.expression()
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MiniGoParser.RPAREN]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_statement" ):
                return visitor.visitList_statement(self)
            else:
                return visitor.visitChildren(self)




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_list_statement)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.statement()
                self.state = 459
                self.list_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 464
                self.declared_statement()
                pass

            elif la_ == 2:
                self.state = 465
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 466
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 467
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 468
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 469
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 470
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 471
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statement2Context,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement2" ):
                return visitor.visitStatement2(self)
            else:
                return visitor.visitChildren(self)




    def statement2(self):

        localctx = MiniGoParser.Statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 474
                self.declared_statement2()
                pass

            elif la_ == 2:
                self.state = 475
                self.if_statement()
                pass

            elif la_ == 3:
                self.state = 476
                self.assign_statement()
                pass

            elif la_ == 4:
                self.state = 477
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 478
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 479
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 480
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 481
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statement2Context,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement3" ):
                return visitor.visitStatement3(self)
            else:
                return visitor.visitChildren(self)




    def statement3(self):

        localctx = MiniGoParser.Statement3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_statement3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.CONST, MiniGoParser.VAR]:
                self.state = 484
                self.declared_statement2()
                pass
            elif token in [MiniGoParser.IF]:
                self.state = 485
                self.if_statement()
                pass
            elif token in [MiniGoParser.FOR]:
                self.state = 486
                self.for_statement()
                pass
            elif token in [MiniGoParser.BREAK]:
                self.state = 487
                self.break_statement()
                pass
            elif token in [MiniGoParser.CONTINUE]:
                self.state = 488
                self.continue_statement()
                pass
            elif token in [MiniGoParser.ID]:
                self.state = 489
                self.call_statement()
                pass
            elif token in [MiniGoParser.RETURN]:
                self.state = 490
                self.return_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_statement" ):
                return visitor.visitDeclared_statement(self)
            else:
                return visitor.visitChildren(self)




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_declared_statement)
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.VAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.variables_declared()
                pass
            elif token in [MiniGoParser.CONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.constants_declared()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared2(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declared2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_statement2" ):
                return visitor.visitDeclared_statement2(self)
            else:
                return visitor.visitChildren(self)




    def declared_statement2(self):

        localctx = MiniGoParser.Declared_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_declared_statement2)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.VAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.variables_declared()
                pass
            elif token in [MiniGoParser.CONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.constants_declared2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(MiniGoParser.AssignableContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_statement" ):
                return visitor.visitAssign_statement(self)
            else:
                return visitor.visitChildren(self)




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.assignable()
                self.state = 502
                self.match(MiniGoParser.ASSIGN)
                self.state = 503
                self.expression()
                self.state = 505 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 504
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 507 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.assignable()
                self.state = 510
                self.match(MiniGoParser.ADD_ASSIGN)
                self.state = 511
                self.expression()
                self.state = 513 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 512
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 515 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 517
                self.assignable()
                self.state = 518
                self.match(MiniGoParser.SUB_ASSIGN)
                self.state = 519
                self.expression()
                self.state = 521 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 520
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 523 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 525
                self.assignable()
                self.state = 526
                self.match(MiniGoParser.MUL_ASSIGN)
                self.state = 527
                self.expression()
                self.state = 529 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 528
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 531 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.assignable()
                self.state = 534
                self.match(MiniGoParser.DIV_ASSIGN)
                self.state = 535
                self.expression()
                self.state = 537 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 536
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 539 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 541
                self.assignable()
                self.state = 542
                self.match(MiniGoParser.MOD_ASSIGN)
                self.state = 543
                self.expression()
                self.state = 545 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 544
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 547 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 549
                self.assignable()
                self.state = 550
                self.match(MiniGoParser.COLON_ASSIGN)
                self.state = 551
                self.expression()
                self.state = 553 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 552
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 555 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 557
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable2(self):
            return self.getTypedRuleContext(MiniGoParser.Assignable2Context,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_statement2" ):
                return visitor.visitAssign_statement2(self)
            else:
                return visitor.visitChildren(self)




    def assign_statement2(self):

        localctx = MiniGoParser.Assign_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assign_statement2)
        self._la = 0 # Token type
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.assignable2()
                self.state = 561
                self.match(MiniGoParser.ASSIGN)
                self.state = 562
                self.expression()
                self.state = 564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 563
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 566 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.assignable2()
                self.state = 569
                self.match(MiniGoParser.ADD_ASSIGN)
                self.state = 570
                self.expression()
                self.state = 572 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 571
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 574 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.assignable2()
                self.state = 577
                self.match(MiniGoParser.SUB_ASSIGN)
                self.state = 578
                self.expression()
                self.state = 580 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 579
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 582 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 584
                self.assignable2()
                self.state = 585
                self.match(MiniGoParser.MUL_ASSIGN)
                self.state = 586
                self.expression()
                self.state = 588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 587
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 590 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 592
                self.assignable2()
                self.state = 593
                self.match(MiniGoParser.DIV_ASSIGN)
                self.state = 594
                self.expression()
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 595
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 600
                self.assignable2()
                self.state = 601
                self.match(MiniGoParser.MOD_ASSIGN)
                self.state = 602
                self.expression()
                self.state = 604 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 603
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 608
                self.assignable2()
                self.state = 609
                self.match(MiniGoParser.COLON_ASSIGN)
                self.state = 610
                self.expression()
                self.state = 612 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 611
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 614 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 616
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignable2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignable2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignable2" ):
                return visitor.visitAssignable2(self)
            else:
                return visitor.visitChildren(self)




    def assignable2(self):

        localctx = MiniGoParser.Assignable2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignable2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail(self):
            return self.getTypedRuleContext(MiniGoParser.TailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignable" ):
                return visitor.visitAssignable(self)
            else:
                return visitor.visitChildren(self)




    def assignable(self):

        localctx = MiniGoParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(MiniGoParser.ID)
            self.state = 622
            self.tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail(self):
            return self.getTypedRuleContext(MiniGoParser.TailContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_tail

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTail" ):
                return visitor.visitTail(self)
            else:
                return visitor.visitChildren(self)




    def tail(self):

        localctx = MiniGoParser.TailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tail)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.match(MiniGoParser.DOT)
                self.state = 625
                self.match(MiniGoParser.ID)
                self.state = 626
                self.tail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(MiniGoParser.LBRACK)
                self.state = 628
                self.expression()
                self.state = 629
                self.match(MiniGoParser.RBRACK)
                self.state = 630
                self.tail()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.return_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tail2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Tail2Context,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_tail2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTail2" ):
                return visitor.visitTail2(self)
            else:
                return visitor.visitChildren(self)




    def tail2(self):

        localctx = MiniGoParser.Tail2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_tail2)
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.match(MiniGoParser.DOT)
                self.state = 637
                self.match(MiniGoParser.ID)
                self.state = 638
                self.tail2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.type_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement1(self):
            return self.getTypedRuleContext(MiniGoParser.If_statement1Context,0)


        def else_if_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Else_if_statementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Else_if_statementContext,i)


        def else_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_block" ):
                return visitor.visitIf_block(self)
            else:
                return visitor.visitChildren(self)




    def if_block(self):

        localctx = MiniGoParser.If_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.if_statement1()
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self.else_if_statement() 
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ELSE:
                self.state = 650
                self.else_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def conditional_body_block(self):
            return self.getTypedRuleContext(MiniGoParser.Conditional_body_blockContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement1" ):
                return visitor.visitIf_statement1(self)
            else:
                return visitor.visitChildren(self)




    def if_statement1(self):

        localctx = MiniGoParser.If_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_if_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(MiniGoParser.IF)
            self.state = 654
            self.match(MiniGoParser.LPAREN)
            self.state = 655
            self.expression()
            self.state = 656
            self.match(MiniGoParser.RPAREN)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 657
                self.match(MiniGoParser.NEWLINE)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 663
            self.conditional_body_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def bodyBLOCK(self):
            return self.getTypedRuleContext(MiniGoParser.BodyBLOCKContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_else_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)




    def else_statement(self):

        localctx = MiniGoParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(MiniGoParser.ELSE)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 666
                self.match(MiniGoParser.NEWLINE)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.bodyBLOCK()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyBLOCKContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_bodyBLOCK

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBodyBLOCK" ):
                return visitor.visitBodyBLOCK(self)
            else:
                return visitor.visitChildren(self)




    def bodyBLOCK(self):

        localctx = MiniGoParser.BodyBLOCKContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_bodyBLOCK)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(MiniGoParser.LBRACE)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 675
                self.match(MiniGoParser.NEWLINE)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 681
            self.statement_with_newlines()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 682
                self.match(MiniGoParser.NEWLINE)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def conditional_body_block(self):
            return self.getTypedRuleContext(MiniGoParser.Conditional_body_blockContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_else_if_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_if_statement" ):
                return visitor.visitElse_if_statement(self)
            else:
                return visitor.visitChildren(self)




    def else_if_statement(self):

        localctx = MiniGoParser.Else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_else_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(MiniGoParser.ELSE)
            self.state = 691
            self.match(MiniGoParser.IF)
            self.state = 692
            self.match(MiniGoParser.LPAREN)
            self.state = 693
            self.expression()
            self.state = 694
            self.match(MiniGoParser.RPAREN)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 695
                self.match(MiniGoParser.NEWLINE)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self.conditional_body_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_body_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Statement2Context,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_conditional_body_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_body_block" ):
                return visitor.visitConditional_body_block(self)
            else:
                return visitor.visitChildren(self)




    def conditional_body_block(self):

        localctx = MiniGoParser.Conditional_body_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_conditional_body_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(MiniGoParser.LBRACE)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 704
                self.match(MiniGoParser.NEWLINE)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self.statement2()
            self.state = 711
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def blockIF(self):
            return self.getTypedRuleContext(MiniGoParser.BlockIFContext,0)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ELSE)
            else:
                return self.getToken(MiniGoParser.ELSE, i)

        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def blockIF2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockIF2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockIF2Context,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.match(MiniGoParser.IF)
                self.state = 714
                self.match(MiniGoParser.LPAREN)
                self.state = 715
                self.expression()
                self.state = 716
                self.match(MiniGoParser.RPAREN)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.NEWLINE:
                    self.state = 717
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 723
                self.blockIF()

                self.state = 724
                self.match(MiniGoParser.ELSE)
                self.state = 725
                self.if_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(MiniGoParser.IF)
                self.state = 728
                self.match(MiniGoParser.LPAREN)
                self.state = 729
                self.expression()
                self.state = 730
                self.match(MiniGoParser.RPAREN)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.NEWLINE:
                    self.state = 731
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 737
                self.blockIF()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.ELSE:
                    self.state = 738
                    self.match(MiniGoParser.ELSE)
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MiniGoParser.NEWLINE:
                        self.state = 739
                        self.match(MiniGoParser.NEWLINE)
                        self.state = 744
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 745
                    self.blockIF2()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(MiniGoParser.IF)
                self.state = 752
                self.match(MiniGoParser.LPAREN)
                self.state = 753
                self.expression()
                self.state = 754
                self.match(MiniGoParser.RPAREN)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.NEWLINE:
                    self.state = 755
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self.blockIF2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(MiniGoParser.LBRACE)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 766
                self.match(MiniGoParser.NEWLINE)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 772
                self.statement2()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 778
            self.match(MiniGoParser.RBRACE)
            self.state = 782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 779
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockIFContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_blockIF

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockIF" ):
                return visitor.visitBlockIF(self)
            else:
                return visitor.visitChildren(self)




    def blockIF(self):

        localctx = MiniGoParser.BlockIFContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_blockIF)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(MiniGoParser.LBRACE)
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 786
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 792
                self.statement2()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE:
                self.state = 798
                _la = self._input.LA(1)
                if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 801
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockIF2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_blockIF2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockIF2" ):
                return visitor.visitBlockIF2(self)
            else:
                return visitor.visitChildren(self)




    def blockIF2(self):

        localctx = MiniGoParser.BlockIF2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_blockIF2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(MiniGoParser.LBRACE)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 804
                self.match(MiniGoParser.NEWLINE)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 810
                self.statement2()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 816
            self.match(MiniGoParser.RBRACE)
            self.state = 818 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 817
                    self.match(MiniGoParser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 820 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def assign_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statement2Context,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.match(MiniGoParser.FOR)
                self.state = 823
                self.expression()
                self.state = 824
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(MiniGoParser.FOR)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.VAR:
                    self.state = 827
                    self.match(MiniGoParser.VAR)


                self.state = 830
                self.assign_statement2()
                self.state = 831
                self.expression()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 832
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 835 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                self.state = 837
                self.match(MiniGoParser.ID)
                self.state = 838
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.ASSIGN) | (1 << MiniGoParser.ADD_ASSIGN) | (1 << MiniGoParser.SUB_ASSIGN) | (1 << MiniGoParser.MUL_ASSIGN) | (1 << MiniGoParser.DIV_ASSIGN) | (1 << MiniGoParser.COLON_ASSIGN))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self.expression()
                self.state = 840
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 842
                self.match(MiniGoParser.FOR)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.VAR:
                    self.state = 843
                    self.match(MiniGoParser.VAR)


                self.state = 846
                self.assign_statement2()
                self.state = 847
                self.match(MiniGoParser.COMMA)
                self.state = 848
                self.match(MiniGoParser.ID)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.COLON_ASSIGN:
                    self.state = 849
                    self.match(MiniGoParser.COLON_ASSIGN)


                self.state = 852
                self.match(MiniGoParser.RANGE)
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.literal()


                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(MiniGoParser.ID)


                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.T__0) | (1 << MiniGoParser.STRING) | (1 << MiniGoParser.INT) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.LBRACK) | (1 << MiniGoParser.ID))) != 0):
                    self.state = 859
                    self.return_type()


                self.state = 862
                self.block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.match(MiniGoParser.FOR)
                self.state = 865
                self.match(MiniGoParser.VAR)
                self.state = 866
                self.assign_statement()
                self.state = 867
                self.expression()
                self.state = 869 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 868
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 871 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        break

                self.state = 873
                self.match(MiniGoParser.ID)
                self.state = 874
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.ASSIGN) | (1 << MiniGoParser.ADD_ASSIGN) | (1 << MiniGoParser.SUB_ASSIGN) | (1 << MiniGoParser.MUL_ASSIGN) | (1 << MiniGoParser.DIV_ASSIGN) | (1 << MiniGoParser.COLON_ASSIGN))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 875
                self.expression()
                self.state = 876
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_break_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(MiniGoParser.BREAK)
            self.state = 882 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 881
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 884 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(MiniGoParser.CONTINUE)
            self.state = 888 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 887
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 890 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr1(self):
            return self.getTypedRuleContext(MiniGoParser.PrimaryExpr1Context,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_statement" ):
                return visitor.visitCall_statement(self)
            else:
                return visitor.visitChildren(self)




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.primaryExpr1()
            self.state = 894 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 893
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 896 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.match(MiniGoParser.RETURN)

                self.state = 899
                self.expression()
                self.state = 901 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 900
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 903 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.match(MiniGoParser.RETURN)
                self.state = 907 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 906
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 909 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared" ):
                return visitor.visitDeclared(self)
            else:
                return visitor.visitChildren(self)




    def declared(self):

        localctx = MiniGoParser.DeclaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declared)
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.function_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.variables_declared()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.constants_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 916
                self.method_declared()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 917
                self.struct_declared()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 918
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared2(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declared2Context,0)


        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared2" ):
                return visitor.visitDeclared2(self)
            else:
                return visitor.visitChildren(self)




    def declared2(self):

        localctx = MiniGoParser.Declared2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_declared2)
        try:
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.variables_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.constants_declared2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.function_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.method_declared()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.struct_declared()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared3" ):
                return visitor.visitDeclared3(self)
            else:
                return visitor.visitChildren(self)




    def declared3(self):

        localctx = MiniGoParser.Declared3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declared3)
        try:
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.variables_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.constants_declared()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 931
                self.struct_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 932
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variables_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variables_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariables_declared" ):
                return visitor.visitVariables_declared(self)
            else:
                return visitor.visitChildren(self)




    def variables_declared(self):

        localctx = MiniGoParser.Variables_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_variables_declared)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.match(MiniGoParser.VAR)
                self.state = 936
                self.match(MiniGoParser.ID)
                self.state = 937
                self.type_spec()
                self.state = 938
                self.match(MiniGoParser.ASSIGN)
                self.state = 939
                self.expression()
                self.state = 941 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 940
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 943 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(MiniGoParser.VAR)
                self.state = 946
                self.match(MiniGoParser.ID)
                self.state = 947
                self.match(MiniGoParser.ASSIGN)
                self.state = 948
                self.expression()
                self.state = 950 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 949
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 952 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.match(MiniGoParser.VAR)
                self.state = 955
                self.match(MiniGoParser.ID)
                self.state = 956
                self.type_spec()
                self.state = 958 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 957
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 960 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 962
                self.match(MiniGoParser.VAR)
                self.state = 963
                self.match(MiniGoParser.ID)
                self.state = 964
                self.type_spec()
                self.state = 965
                self.match(MiniGoParser.ASSIGN)
                self.state = 966
                self.match(MiniGoParser.ID)
                self.state = 967
                self.expression()
                self.state = 969 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 968
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 971 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 973
                self.match(MiniGoParser.VAR)
                self.state = 974
                self.match(MiniGoParser.ID)
                self.state = 975
                self.return_type()
                self.state = 976
                self.type_spec()
                self.state = 977
                self.match(MiniGoParser.ASSIGN)
                self.state = 978
                self.expression()
                self.state = 980 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 979
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 982 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 984
                self.match(MiniGoParser.VAR)
                self.state = 985
                self.match(MiniGoParser.ID)
                self.state = 986
                self.return_type()
                self.state = 987
                self.type_spec()
                self.state = 989 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 988
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 991 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = MiniGoParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.T__0) | (1 << MiniGoParser.STRING) | (1 << MiniGoParser.INT) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.ID))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(MiniGoParser.Constant_expressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants_declared" ):
                return visitor.visitConstants_declared(self)
            else:
                return visitor.visitChildren(self)




    def constants_declared(self):

        localctx = MiniGoParser.Constants_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_constants_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(MiniGoParser.CONST)
            self.state = 998
            self.match(MiniGoParser.ID)
            self.state = 999
            self.match(MiniGoParser.ASSIGN)
            self.state = 1000
            self.constant_expression()
            self.state = 1002 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1001
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1004 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declared2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(MiniGoParser.Constant_expressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants_declared2" ):
                return visitor.visitConstants_declared2(self)
            else:
                return visitor.visitChildren(self)




    def constants_declared2(self):

        localctx = MiniGoParser.Constants_declared2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constants_declared2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(MiniGoParser.CONST)
            self.state = 1007
            self.match(MiniGoParser.ID)
            self.state = 1008
            self.match(MiniGoParser.ASSIGN)
            self.state = 1009
            self.constant_expression()
            self.state = 1011 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1010
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1013 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constant_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = MiniGoParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def function_body(self):
            return self.getTypedRuleContext(MiniGoParser.Function_bodyContext,0)


        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_declared" ):
                return visitor.visitFunction_declared(self)
            else:
                return visitor.visitChildren(self)




    def function_declared(self):

        localctx = MiniGoParser.Function_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_function_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(MiniGoParser.FUNC)
            self.state = 1018
            self.match(MiniGoParser.ID)
            self.state = 1019
            self.match(MiniGoParser.LPAREN)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 1020
                self.parameter_list()


            self.state = 1023
            self.match(MiniGoParser.RPAREN)
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.return_type()


            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 1027
                self.match(MiniGoParser.ID)


            self.state = 1030
            self.function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(MiniGoParser.ParameterContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_list" ):
                return visitor.visitParameter_list(self)
            else:
                return visitor.visitChildren(self)




    def parameter_list(self):

        localctx = MiniGoParser.Parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameter_list)
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.parameter()
                self.state = 1033
                self.type_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.parameter()
                self.state = 1036
                self.match(MiniGoParser.COMMA)
                self.state = 1037
                self.parameter_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = MiniGoParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(MiniGoParser.ID)
            self.state = 1042
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_type" ):
                return visitor.visitParameter_type(self)
            else:
                return visitor.visitChildren(self)




    def parameter_type(self):

        localctx = MiniGoParser.Parameter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parameter_type)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.type_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.match(MiniGoParser.LBRACK)
                self.state = 1046
                self.match(MiniGoParser.INT_LIT)
                self.state = 1047
                self.match(MiniGoParser.RBRACK)
                self.state = 1048
                self.parameter_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def array_type(self):
            return self.getTypedRuleContext(MiniGoParser.Array_typeContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_return_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_type" ):
                return visitor.visitReturn_type(self)
            else:
                return visitor.visitChildren(self)




    def return_type(self):

        localctx = MiniGoParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_return_type)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.T__0, MiniGoParser.STRING, MiniGoParser.INT, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.type_spec()
                pass
            elif token in [MiniGoParser.LBRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.array_type()
                self.state = 1055
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1054
                    self.match(MiniGoParser.ID)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LBRACK)
            else:
                return self.getToken(MiniGoParser.LBRACK, i)

        def INT_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.INT_LIT)
            else:
                return self.getToken(MiniGoParser.INT_LIT, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RBRACK)
            else:
                return self.getToken(MiniGoParser.RBRACK, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_type" ):
                return visitor.visitArray_type(self)
            else:
                return visitor.visitChildren(self)




    def array_type(self):

        localctx = MiniGoParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_array_type)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.match(MiniGoParser.LBRACK)
                self.state = 1060
                self.match(MiniGoParser.INT_LIT)
                self.state = 1061
                self.match(MiniGoParser.RBRACK)
                self.state = 1062
                self.match(MiniGoParser.LBRACK)
                self.state = 1063
                self.match(MiniGoParser.INT_LIT)
                self.state = 1064
                self.match(MiniGoParser.RBRACK)
                self.state = 1066
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1065
                    self.match(MiniGoParser.ID)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(MiniGoParser.LBRACK)
                self.state = 1069
                self.match(MiniGoParser.INT_LIT)
                self.state = 1070
                self.match(MiniGoParser.RBRACK)
                self.state = 1072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1071
                    self.match(MiniGoParser.ID)


                self.state = 1075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1074
                    self.type_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_function_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_body" ):
                return visitor.visitFunction_body(self)
            else:
                return visitor.visitChildren(self)




    def function_body(self):

        localctx = MiniGoParser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(MiniGoParser.LBRACE)
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 1080
                self.match(MiniGoParser.NEWLINE)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 1086
                self.statement_with_newlines()


            self.state = 1089
            self.match(MiniGoParser.RBRACE)
            self.state = 1091 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1090
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1093 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_with_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Statement2Context,0)


        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement_with_newlines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_with_newlines" ):
                return visitor.visitStatement_with_newlines(self)
            else:
                return visitor.visitChildren(self)




    def statement_with_newlines(self):

        localctx = MiniGoParser.Statement_with_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement_with_newlines)
        try:
            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.statement2()
                self.state = 1096
                self.statement_with_newlines()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.statement2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def recursive_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Recursive_newlinesContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_list" ):
                return visitor.visitStatement_list(self)
            else:
                return visitor.visitChildren(self)




    def statement_list(self):

        localctx = MiniGoParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_statement_list)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.statement()
                self.state = 1103
                self.recursive_newlines()
                self.state = 1104
                self.statement_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def receiver(self):
            return self.getTypedRuleContext(MiniGoParser.ReceiverContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def function_body(self):
            return self.getTypedRuleContext(MiniGoParser.Function_bodyContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def parameter_list2(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_list2Context,0)


        def receiver2(self):
            return self.getTypedRuleContext(MiniGoParser.Receiver2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declared" ):
                return visitor.visitMethod_declared(self)
            else:
                return visitor.visitChildren(self)




    def method_declared(self):

        localctx = MiniGoParser.Method_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_method_declared)
        self._la = 0 # Token type
        try:
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(MiniGoParser.FUNC)
                self.state = 1109
                self.match(MiniGoParser.LPAREN)
                self.state = 1110
                self.receiver()
                self.state = 1111
                self.match(MiniGoParser.RPAREN)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1112
                    self.match(MiniGoParser.ID)


                self.state = 1115
                self.match(MiniGoParser.LPAREN)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1116
                    self.parameter_list2()


                self.state = 1119
                self.match(MiniGoParser.RPAREN)
                self.state = 1120
                self.return_type()
                self.state = 1121
                self.function_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                self.match(MiniGoParser.FUNC)
                self.state = 1124
                self.match(MiniGoParser.LPAREN)
                self.state = 1125
                self.receiver()
                self.state = 1126
                self.match(MiniGoParser.RPAREN)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1127
                    self.match(MiniGoParser.ID)


                self.state = 1130
                self.match(MiniGoParser.LPAREN)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1131
                    self.parameter_list2()


                self.state = 1134
                self.match(MiniGoParser.RPAREN)
                self.state = 1135
                self.match(MiniGoParser.ID)
                self.state = 1136
                self.function_body()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1138
                self.match(MiniGoParser.FUNC)
                self.state = 1139
                self.match(MiniGoParser.LPAREN)
                self.state = 1140
                self.receiver()
                self.state = 1141
                self.match(MiniGoParser.RPAREN)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1142
                    self.match(MiniGoParser.ID)


                self.state = 1145
                self.match(MiniGoParser.LPAREN)
                self.state = 1146
                self.parameter_list2()
                self.state = 1147
                self.match(MiniGoParser.RPAREN)
                self.state = 1148
                self.function_body()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1150
                self.match(MiniGoParser.FUNC)
                self.state = 1151
                self.match(MiniGoParser.LPAREN)
                self.state = 1152
                self.receiver()
                self.state = 1153
                self.match(MiniGoParser.RPAREN)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1154
                    self.match(MiniGoParser.ID)


                self.state = 1157
                self.match(MiniGoParser.LPAREN)
                self.state = 1158
                self.parameter_list2()
                self.state = 1159
                self.match(MiniGoParser.RPAREN)
                self.state = 1160
                self.function_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.match(MiniGoParser.FUNC)
                self.state = 1163
                self.match(MiniGoParser.LPAREN)
                self.state = 1164
                self.receiver()
                self.state = 1165
                self.match(MiniGoParser.RPAREN)
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ID:
                    self.state = 1166
                    self.match(MiniGoParser.ID)


                self.state = 1169
                self.match(MiniGoParser.LPAREN)
                self.state = 1170
                self.match(MiniGoParser.RPAREN)
                self.state = 1171
                self.function_body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1173
                self.match(MiniGoParser.FUNC)
                self.state = 1174
                self.match(MiniGoParser.ID)
                self.state = 1175
                self.match(MiniGoParser.LPAREN)
                self.state = 1176
                self.match(MiniGoParser.RPAREN)
                self.state = 1177
                self.function_body()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.match(MiniGoParser.FUNC)
                self.state = 1179
                self.match(MiniGoParser.LPAREN)
                self.state = 1180
                self.receiver2()
                self.state = 1181
                self.match(MiniGoParser.RPAREN)
                self.state = 1182
                self.match(MiniGoParser.ID)
                self.state = 1183
                self.match(MiniGoParser.LPAREN)
                self.state = 1184
                self.match(MiniGoParser.RPAREN)
                self.state = 1185
                self.return_type()
                self.state = 1186
                self.function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Parameter2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Parameter2Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_list2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_list2" ):
                return visitor.visitParameter_list2(self)
            else:
                return visitor.visitChildren(self)




    def parameter_list2(self):

        localctx = MiniGoParser.Parameter_list2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parameter_list2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.parameter2()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.COMMA:
                self.state = 1191
                self.match(MiniGoParser.COMMA)
                self.state = 1192
                self.parameter2()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter2" ):
                return visitor.visitParameter2(self)
            else:
                return visitor.visitChildren(self)




    def parameter2(self):

        localctx = MiniGoParser.Parameter2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameter2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(MiniGoParser.ID)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.T__0) | (1 << MiniGoParser.STRING) | (1 << MiniGoParser.INT) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.LBRACK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 1199
                self.return_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiver" ):
                return visitor.visitReceiver(self)
            else:
                return visitor.visitChildren(self)




    def receiver(self):

        localctx = MiniGoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_receiver)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1202
                self.match(MiniGoParser.ID)


            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 1205
                self.match(MiniGoParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receiver2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiver2" ):
                return visitor.visitReceiver2(self)
            else:
                return visitor.visitChildren(self)




    def receiver2(self):

        localctx = MiniGoParser.Receiver2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_receiver2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(MiniGoParser.ID)
            self.state = 1209
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.FieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.FieldContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declared" ):
                return visitor.visitStruct_declared(self)
            else:
                return visitor.visitChildren(self)




    def struct_declared(self):

        localctx = MiniGoParser.Struct_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_struct_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(MiniGoParser.TYPE)
            self.state = 1212
            self.match(MiniGoParser.ID)
            self.state = 1213
            self.match(MiniGoParser.STRUCT)
            self.state = 1214
            self.match(MiniGoParser.LBRACE)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 1215
                self.match(MiniGoParser.NEWLINE)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1222 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1221
                self.field()
                self.state = 1224 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.TYPE) | (1 << MiniGoParser.CONST) | (1 << MiniGoParser.VAR) | (1 << MiniGoParser.ID))) != 0)):
                    break

            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 1226
                self.match(MiniGoParser.NEWLINE)
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.match(MiniGoParser.RBRACE)
            self.state = 1233
            _la = self._input.LA(1)
            if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.FieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.FieldContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_list" ):
                return visitor.visitField_list(self)
            else:
                return visitor.visitChildren(self)




    def field_list(self):

        localctx = MiniGoParser.Field_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_field_list)
        self._la = 0 # Token type
        try:
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.field()
                self.state = 1240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1236
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1237
                        self.field() 
                    self.state = 1242
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1243
                self.match(MiniGoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.return_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def declared3(self):
            return self.getTypedRuleContext(MiniGoParser.Declared3Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField" ):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.match(MiniGoParser.ID)
                self.state = 1249
                self.return_type()
                self.state = 1251 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1250
                        _la = self._input.LA(1)
                        if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1253 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                pass
            elif token in [MiniGoParser.TYPE, MiniGoParser.CONST, MiniGoParser.VAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.declared3()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def method_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Method_declContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Method_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_declared" ):
                return visitor.visitInterface_declared(self)
            else:
                return visitor.visitChildren(self)




    def interface_declared(self):

        localctx = MiniGoParser.Interface_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_interface_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(MiniGoParser.TYPE)
            self.state = 1259
            self.match(MiniGoParser.ID)
            self.state = 1260
            self.match(MiniGoParser.INTERFACE)
            self.state = 1261
            self.match(MiniGoParser.LBRACE)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 1262
                self.match(MiniGoParser.NEWLINE)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1269 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1268
                self.method_decl()
                self.state = 1271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MiniGoParser.ID):
                    break

            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 1273
                self.match(MiniGoParser.NEWLINE)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1279
            self.match(MiniGoParser.RBRACE)
            self.state = 1281 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1280
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1283 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def optional_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Optional_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_optional_newlines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional_newlines" ):
                return visitor.visitOptional_newlines(self)
            else:
                return visitor.visitChildren(self)




    def optional_newlines(self):

        localctx = MiniGoParser.Optional_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_optional_newlines)
        try:
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.match(MiniGoParser.NEWLINE)
                self.state = 1287
                self.optional_newlines()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_list" ):
                return visitor.visitMethod_list(self)
            else:
                return visitor.visitChildren(self)




    def method_list(self):

        localctx = MiniGoParser.Method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_method_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.method_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def recursive_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Recursive_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_recursive_newlines

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecursive_newlines" ):
                return visitor.visitRecursive_newlines(self)
            else:
                return visitor.visitChildren(self)




    def recursive_newlines(self):

        localctx = MiniGoParser.Recursive_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_recursive_newlines)
        try:
            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(MiniGoParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.match(MiniGoParser.NEWLINE)
                self.state = 1294
                self.recursive_newlines()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_decl" ):
                return visitor.visitMethod_decl(self)
            else:
                return visitor.visitChildren(self)




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(MiniGoParser.ID)
            self.state = 1298
            self.match(MiniGoParser.LPAREN)
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 1299
                self.parameter_list()


            self.state = 1302
            self.match(MiniGoParser.RPAREN)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.T__0) | (1 << MiniGoParser.STRING) | (1 << MiniGoParser.INT) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.LBRACK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 1303
                self.return_type()


            self.state = 1307 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1306
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.SEMI or _la==MiniGoParser.NEWLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1309 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_method_signature

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_signature" ):
                return visitor.visitMethod_signature(self)
            else:
                return visitor.visitChildren(self)




    def method_signature(self):

        localctx = MiniGoParser.Method_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_method_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(MiniGoParser.ID)
            self.state = 1312
            self.match(MiniGoParser.LPAREN)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 1313
                self.parameter_list()


            self.state = 1316
            self.match(MiniGoParser.RPAREN)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.T__0) | (1 << MiniGoParser.STRING) | (1 << MiniGoParser.INT) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.LBRACK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 1317
                self.return_type()


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMI:
                self.state = 1320
                self.match(MiniGoParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[16] = self.logicalOrExpr_sempred
        self._predicates[17] = self.logicalAndExpr_sempred
        self._predicates[18] = self.equalityExpr_sempred
        self._predicates[19] = self.relationalExpr_sempred
        self._predicates[20] = self.additiveExpr_sempred
        self._predicates[21] = self.multiplicativeExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logicalOrExpr_sempred(self, localctx:LogicalOrExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logicalAndExpr_sempred(self, localctx:LogicalAndExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def equalityExpr_sempred(self, localctx:EqualityExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def relationalExpr_sempred(self, localctx:RelationalExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def additiveExpr_sempred(self, localctx:AdditiveExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def multiplicativeExpr_sempred(self, localctx:MultiplicativeExprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




