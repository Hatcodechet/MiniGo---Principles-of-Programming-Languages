# Generated from /Users/phamnguyenviettri/VoTien/BTL/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,66,1324,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,5,
        0,184,8,0,10,0,12,0,187,9,0,1,0,1,0,1,0,5,0,192,8,0,10,0,12,0,195,
        9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,210,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,223,8,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,236,8,3,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,253,8,6,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,269,8,8,
        1,9,1,9,1,9,1,9,3,9,275,8,9,1,9,1,9,1,10,1,10,1,11,5,11,282,8,11,
        10,11,12,11,285,9,11,1,11,1,11,5,11,289,8,11,10,11,12,11,292,9,11,
        1,12,1,12,1,12,1,12,1,12,1,12,3,12,300,8,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,3,14,311,8,14,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,5,16,321,8,16,10,16,12,16,324,9,16,1,17,1,17,1,17,
        1,17,1,17,1,17,5,17,332,8,17,10,17,12,17,335,9,17,1,18,1,18,1,18,
        1,18,1,18,1,18,5,18,343,8,18,10,18,12,18,346,9,18,1,19,1,19,1,19,
        1,19,1,19,1,19,5,19,354,8,19,10,19,12,19,357,9,19,1,20,1,20,1,20,
        1,20,1,20,1,20,5,20,365,8,20,10,20,12,20,368,9,20,1,21,1,21,1,21,
        1,21,1,21,1,21,5,21,376,8,21,10,21,12,21,379,9,21,1,22,1,22,1,22,
        3,22,384,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        3,25,396,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,404,8,26,1,27,1,
        27,1,28,1,28,1,28,3,28,411,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,3,29,422,8,29,1,30,1,30,1,30,1,30,5,30,428,8,30,10,
        30,12,30,431,9,30,1,30,1,30,3,30,435,8,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,3,31,446,8,31,1,32,1,32,1,32,5,32,451,8,32,
        10,32,12,32,454,9,32,1,32,3,32,457,8,32,1,33,1,33,1,33,1,33,3,33,
        463,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,473,8,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,483,8,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,3,36,492,8,36,1,37,1,37,3,37,496,8,37,1,38,
        1,38,3,38,500,8,38,1,39,1,39,1,39,1,39,4,39,506,8,39,11,39,12,39,
        507,1,39,1,39,1,39,1,39,4,39,514,8,39,11,39,12,39,515,1,39,1,39,
        1,39,1,39,4,39,522,8,39,11,39,12,39,523,1,39,1,39,1,39,1,39,4,39,
        530,8,39,11,39,12,39,531,1,39,1,39,1,39,1,39,4,39,538,8,39,11,39,
        12,39,539,1,39,1,39,1,39,1,39,4,39,546,8,39,11,39,12,39,547,1,39,
        1,39,1,39,1,39,4,39,554,8,39,11,39,12,39,555,1,39,3,39,559,8,39,
        1,40,1,40,1,40,1,40,4,40,565,8,40,11,40,12,40,566,1,40,1,40,1,40,
        1,40,4,40,573,8,40,11,40,12,40,574,1,40,1,40,1,40,1,40,4,40,581,
        8,40,11,40,12,40,582,1,40,1,40,1,40,1,40,4,40,589,8,40,11,40,12,
        40,590,1,40,1,40,1,40,1,40,4,40,597,8,40,11,40,12,40,598,1,40,1,
        40,1,40,1,40,4,40,605,8,40,11,40,12,40,606,1,40,1,40,1,40,1,40,4,
        40,613,8,40,11,40,12,40,614,1,40,3,40,618,8,40,1,41,1,41,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,635,
        8,43,1,44,1,44,1,44,1,44,1,44,3,44,642,8,44,1,45,1,45,5,45,646,8,
        45,10,45,12,45,649,9,45,1,45,3,45,652,8,45,1,46,1,46,1,46,1,46,1,
        46,5,46,659,8,46,10,46,12,46,662,9,46,1,46,1,46,1,47,1,47,5,47,668,
        8,47,10,47,12,47,671,9,47,1,47,1,47,1,48,1,48,5,48,677,8,48,10,48,
        12,48,680,9,48,1,48,1,48,5,48,684,8,48,10,48,12,48,687,9,48,1,48,
        1,48,1,49,1,49,1,49,1,49,1,49,1,49,5,49,697,8,49,10,49,12,49,700,
        9,49,1,49,1,49,1,50,1,50,5,50,706,8,50,10,50,12,50,709,9,50,1,50,
        1,50,1,50,1,51,1,51,1,51,1,51,1,51,5,51,719,8,51,10,51,12,51,722,
        9,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,733,8,51,
        10,51,12,51,736,9,51,1,51,1,51,1,51,5,51,741,8,51,10,51,12,51,744,
        9,51,1,51,5,51,747,8,51,10,51,12,51,750,9,51,1,51,1,51,1,51,1,51,
        1,51,5,51,757,8,51,10,51,12,51,760,9,51,1,51,1,51,3,51,764,8,51,
        1,52,1,52,5,52,768,8,52,10,52,12,52,771,9,52,1,52,5,52,774,8,52,
        10,52,12,52,777,9,52,1,52,1,52,5,52,781,8,52,10,52,12,52,784,9,52,
        1,53,1,53,5,53,788,8,53,10,53,12,53,791,9,53,1,53,5,53,794,8,53,
        10,53,12,53,797,9,53,1,53,3,53,800,8,53,1,53,1,53,1,54,1,54,5,54,
        806,8,54,10,54,12,54,809,9,54,1,54,5,54,812,8,54,10,54,12,54,815,
        9,54,1,54,1,54,4,54,819,8,54,11,54,12,54,820,1,55,1,55,1,55,1,55,
        1,55,1,55,3,55,829,8,55,1,55,1,55,1,55,4,55,834,8,55,11,55,12,55,
        835,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,845,8,55,1,55,1,55,1,
        55,1,55,3,55,851,8,55,1,55,1,55,3,55,855,8,55,1,55,3,55,858,8,55,
        1,55,3,55,861,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,4,55,870,8,
        55,11,55,12,55,871,1,55,1,55,1,55,1,55,1,55,3,55,879,8,55,1,56,1,
        56,4,56,883,8,56,11,56,12,56,884,1,57,1,57,4,57,889,8,57,11,57,12,
        57,890,1,58,1,58,4,58,895,8,58,11,58,12,58,896,1,59,1,59,1,59,4,
        59,902,8,59,11,59,12,59,903,1,59,1,59,4,59,908,8,59,11,59,12,59,
        909,3,59,912,8,59,1,60,1,60,1,60,1,60,1,60,1,60,3,60,920,8,60,1,
        61,1,61,1,61,1,61,1,61,1,61,3,61,928,8,61,1,62,1,62,1,62,1,62,3,
        62,934,8,62,1,63,1,63,1,63,1,63,1,63,1,63,4,63,942,8,63,11,63,12,
        63,943,1,63,1,63,1,63,1,63,1,63,4,63,951,8,63,11,63,12,63,952,1,
        63,1,63,1,63,1,63,4,63,959,8,63,11,63,12,63,960,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,4,63,970,8,63,11,63,12,63,971,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,4,63,981,8,63,11,63,12,63,982,1,63,1,63,1,63,1,
        63,1,63,4,63,990,8,63,11,63,12,63,991,3,63,994,8,63,1,64,1,64,1,
        65,1,65,1,65,1,65,1,65,4,65,1003,8,65,11,65,12,65,1004,1,66,1,66,
        1,66,1,66,1,66,4,66,1012,8,66,11,66,12,66,1013,1,67,1,67,1,68,1,
        68,1,68,1,68,3,68,1022,8,68,1,68,1,68,3,68,1026,8,68,1,68,3,68,1029,
        8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1040,8,69,
        1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1051,8,71,1,72,
        1,72,1,72,3,72,1056,8,72,3,72,1058,8,72,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,3,73,1067,8,73,1,73,1,73,1,73,1,73,3,73,1073,8,73,1,73,
        3,73,1076,8,73,3,73,1078,8,73,1,74,1,74,5,74,1082,8,74,10,74,12,
        74,1085,9,74,1,74,3,74,1088,8,74,1,74,1,74,4,74,1092,8,74,11,74,
        12,74,1093,1,75,1,75,1,75,1,75,3,75,1100,8,75,1,76,1,76,1,76,1,76,
        1,76,3,76,1107,8,76,1,77,1,77,1,77,1,77,1,77,3,77,1114,8,77,1,77,
        1,77,3,77,1118,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        3,77,1129,8,77,1,77,1,77,3,77,1133,8,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,3,77,1144,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,3,77,1156,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,3,77,1168,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        3,77,1189,8,77,1,78,1,78,1,78,5,78,1194,8,78,10,78,12,78,1197,9,
        78,1,79,1,79,3,79,1201,8,79,1,80,3,80,1204,8,80,1,80,3,80,1207,8,
        80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,5,82,1217,8,82,10,82,
        12,82,1220,9,82,1,82,4,82,1223,8,82,11,82,12,82,1224,1,82,5,82,1228,
        8,82,10,82,12,82,1231,9,82,1,82,1,82,1,82,1,83,1,83,1,83,5,83,1239,
        8,83,10,83,12,83,1242,9,83,1,83,1,83,1,83,3,83,1247,8,83,1,84,1,
        84,1,84,4,84,1252,8,84,11,84,12,84,1253,1,84,3,84,1257,8,84,1,85,
        1,85,1,85,1,85,1,85,5,85,1264,8,85,10,85,12,85,1267,9,85,1,85,4,
        85,1270,8,85,11,85,12,85,1271,1,85,5,85,1275,8,85,10,85,12,85,1278,
        9,85,1,85,1,85,4,85,1282,8,85,11,85,12,85,1283,1,86,1,86,1,86,3,
        86,1289,8,86,1,87,1,87,1,88,1,88,1,88,3,88,1296,8,88,1,89,1,89,1,
        89,3,89,1301,8,89,1,89,1,89,3,89,1305,8,89,1,89,4,89,1308,8,89,11,
        89,12,89,1309,1,90,1,90,1,90,3,90,1315,8,90,1,90,1,90,3,90,1319,
        8,90,1,90,3,90,1322,8,90,1,90,0,6,32,34,36,38,40,42,91,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,0,9,1,0,53,54,1,0,27,28,1,0,
        29,32,1,0,22,23,1,0,24,26,2,0,23,23,35,35,2,0,50,50,61,61,2,0,36,
        40,42,42,3,0,1,1,10,13,53,53,1469,0,185,1,0,0,0,2,209,1,0,0,0,4,
        222,1,0,0,0,6,235,1,0,0,0,8,237,1,0,0,0,10,239,1,0,0,0,12,252,1,
        0,0,0,14,254,1,0,0,0,16,268,1,0,0,0,18,270,1,0,0,0,20,278,1,0,0,
        0,22,283,1,0,0,0,24,299,1,0,0,0,26,301,1,0,0,0,28,310,1,0,0,0,30,
        312,1,0,0,0,32,314,1,0,0,0,34,325,1,0,0,0,36,336,1,0,0,0,38,347,
        1,0,0,0,40,358,1,0,0,0,42,369,1,0,0,0,44,383,1,0,0,0,46,385,1,0,
        0,0,48,388,1,0,0,0,50,395,1,0,0,0,52,403,1,0,0,0,54,405,1,0,0,0,
        56,410,1,0,0,0,58,421,1,0,0,0,60,434,1,0,0,0,62,445,1,0,0,0,64,456,
        1,0,0,0,66,462,1,0,0,0,68,472,1,0,0,0,70,482,1,0,0,0,72,491,1,0,
        0,0,74,495,1,0,0,0,76,499,1,0,0,0,78,558,1,0,0,0,80,617,1,0,0,0,
        82,619,1,0,0,0,84,621,1,0,0,0,86,634,1,0,0,0,88,641,1,0,0,0,90,643,
        1,0,0,0,92,653,1,0,0,0,94,665,1,0,0,0,96,674,1,0,0,0,98,690,1,0,
        0,0,100,703,1,0,0,0,102,763,1,0,0,0,104,765,1,0,0,0,106,785,1,0,
        0,0,108,803,1,0,0,0,110,878,1,0,0,0,112,880,1,0,0,0,114,886,1,0,
        0,0,116,892,1,0,0,0,118,911,1,0,0,0,120,919,1,0,0,0,122,927,1,0,
        0,0,124,933,1,0,0,0,126,993,1,0,0,0,128,995,1,0,0,0,130,997,1,0,
        0,0,132,1006,1,0,0,0,134,1015,1,0,0,0,136,1017,1,0,0,0,138,1039,
        1,0,0,0,140,1041,1,0,0,0,142,1050,1,0,0,0,144,1057,1,0,0,0,146,1077,
        1,0,0,0,148,1079,1,0,0,0,150,1099,1,0,0,0,152,1106,1,0,0,0,154,1188,
        1,0,0,0,156,1190,1,0,0,0,158,1198,1,0,0,0,160,1203,1,0,0,0,162,1208,
        1,0,0,0,164,1211,1,0,0,0,166,1246,1,0,0,0,168,1256,1,0,0,0,170,1258,
        1,0,0,0,172,1288,1,0,0,0,174,1290,1,0,0,0,176,1295,1,0,0,0,178,1297,
        1,0,0,0,180,1311,1,0,0,0,182,184,5,61,0,0,183,182,1,0,0,0,184,187,
        1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,
        1,0,0,0,188,193,3,120,60,0,189,192,3,120,60,0,190,192,5,61,0,0,191,
        189,1,0,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,
        194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,0,0,1,197,
        1,1,0,0,0,198,210,5,54,0,0,199,210,5,58,0,0,200,210,5,60,0,0,201,
        210,5,57,0,0,202,210,5,56,0,0,203,210,5,20,0,0,204,210,5,21,0,0,
        205,210,3,10,5,0,206,210,3,20,10,0,207,210,5,55,0,0,208,210,5,19,
        0,0,209,198,1,0,0,0,209,199,1,0,0,0,209,200,1,0,0,0,209,201,1,0,
        0,0,209,202,1,0,0,0,209,203,1,0,0,0,209,204,1,0,0,0,209,205,1,0,
        0,0,209,206,1,0,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,3,1,0,0,
        0,211,223,5,54,0,0,212,223,5,58,0,0,213,223,5,60,0,0,214,223,5,57,
        0,0,215,223,5,56,0,0,216,223,5,20,0,0,217,223,5,21,0,0,218,223,3,
        10,5,0,219,223,3,20,10,0,220,223,5,55,0,0,221,223,5,19,0,0,222,211,
        1,0,0,0,222,212,1,0,0,0,222,213,1,0,0,0,222,214,1,0,0,0,222,215,
        1,0,0,0,222,216,1,0,0,0,222,217,1,0,0,0,222,218,1,0,0,0,222,219,
        1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,5,1,0,0,0,224,236,5,
        54,0,0,225,236,5,58,0,0,226,236,5,60,0,0,227,236,5,57,0,0,228,236,
        5,56,0,0,229,236,5,20,0,0,230,236,5,21,0,0,231,236,3,22,11,0,232,
        236,5,55,0,0,233,236,5,19,0,0,234,236,5,53,0,0,235,224,1,0,0,0,235,
        225,1,0,0,0,235,226,1,0,0,0,235,227,1,0,0,0,235,228,1,0,0,0,235,
        229,1,0,0,0,235,230,1,0,0,0,235,231,1,0,0,0,235,232,1,0,0,0,235,
        233,1,0,0,0,235,234,1,0,0,0,236,7,1,0,0,0,237,238,7,0,0,0,238,9,
        1,0,0,0,239,240,5,48,0,0,240,241,3,8,4,0,241,242,5,49,0,0,242,243,
        3,12,6,0,243,11,1,0,0,0,244,245,5,48,0,0,245,246,3,8,4,0,246,247,
        5,49,0,0,247,248,3,12,6,0,248,253,1,0,0,0,249,250,3,128,64,0,250,
        251,3,14,7,0,251,253,1,0,0,0,252,244,1,0,0,0,252,249,1,0,0,0,253,
        13,1,0,0,0,254,255,5,46,0,0,255,256,3,16,8,0,256,257,5,47,0,0,257,
        15,1,0,0,0,258,269,3,6,3,0,259,260,3,6,3,0,260,261,5,52,0,0,261,
        262,3,16,8,0,262,269,1,0,0,0,263,269,3,14,7,0,264,265,3,14,7,0,265,
        266,5,52,0,0,266,267,3,16,8,0,267,269,1,0,0,0,268,258,1,0,0,0,268,
        259,1,0,0,0,268,263,1,0,0,0,268,264,1,0,0,0,269,17,1,0,0,0,270,271,
        5,53,0,0,271,274,5,46,0,0,272,275,3,6,3,0,273,275,3,24,12,0,274,
        272,1,0,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,277,5,47,0,0,277,
        19,1,0,0,0,278,279,3,18,9,0,279,21,1,0,0,0,280,282,5,46,0,0,281,
        280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,
        286,1,0,0,0,285,283,1,0,0,0,286,290,3,18,9,0,287,289,5,47,0,0,288,
        287,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,
        23,1,0,0,0,292,290,1,0,0,0,293,294,3,26,13,0,294,295,5,52,0,0,295,
        296,3,24,12,0,296,300,1,0,0,0,297,300,3,26,13,0,298,300,1,0,0,0,
        299,293,1,0,0,0,299,297,1,0,0,0,299,298,1,0,0,0,300,25,1,0,0,0,301,
        302,5,53,0,0,302,303,5,51,0,0,303,304,3,30,15,0,304,27,1,0,0,0,305,
        306,3,30,15,0,306,307,5,52,0,0,307,308,3,28,14,0,308,311,1,0,0,0,
        309,311,3,30,15,0,310,305,1,0,0,0,310,309,1,0,0,0,311,29,1,0,0,0,
        312,313,3,32,16,0,313,31,1,0,0,0,314,315,6,16,-1,0,315,316,3,34,
        17,0,316,322,1,0,0,0,317,318,10,2,0,0,318,319,5,34,0,0,319,321,3,
        34,17,0,320,317,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,
        1,0,0,0,323,33,1,0,0,0,324,322,1,0,0,0,325,326,6,17,-1,0,326,327,
        3,36,18,0,327,333,1,0,0,0,328,329,10,2,0,0,329,330,5,33,0,0,330,
        332,3,36,18,0,331,328,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,
        334,1,0,0,0,334,35,1,0,0,0,335,333,1,0,0,0,336,337,6,18,-1,0,337,
        338,3,38,19,0,338,344,1,0,0,0,339,340,10,2,0,0,340,341,7,1,0,0,341,
        343,3,38,19,0,342,339,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,
        345,1,0,0,0,345,37,1,0,0,0,346,344,1,0,0,0,347,348,6,19,-1,0,348,
        349,3,40,20,0,349,355,1,0,0,0,350,351,10,2,0,0,351,352,7,2,0,0,352,
        354,3,40,20,0,353,350,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,
        356,1,0,0,0,356,39,1,0,0,0,357,355,1,0,0,0,358,359,6,20,-1,0,359,
        360,3,42,21,0,360,366,1,0,0,0,361,362,10,2,0,0,362,363,7,3,0,0,363,
        365,3,42,21,0,364,361,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,
        367,1,0,0,0,367,41,1,0,0,0,368,366,1,0,0,0,369,370,6,21,-1,0,370,
        371,3,44,22,0,371,377,1,0,0,0,372,373,10,2,0,0,373,374,7,4,0,0,374,
        376,3,44,22,0,375,372,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,
        378,1,0,0,0,378,43,1,0,0,0,379,377,1,0,0,0,380,381,7,5,0,0,381,384,
        3,44,22,0,382,384,3,46,23,0,383,380,1,0,0,0,383,382,1,0,0,0,384,
        45,1,0,0,0,385,386,3,52,26,0,386,387,3,50,25,0,387,47,1,0,0,0,388,
        389,3,54,27,0,389,390,3,50,25,0,390,49,1,0,0,0,391,392,3,56,28,0,
        392,393,3,50,25,0,393,396,1,0,0,0,394,396,1,0,0,0,395,391,1,0,0,
        0,395,394,1,0,0,0,396,51,1,0,0,0,397,404,3,4,2,0,398,404,5,53,0,
        0,399,400,5,44,0,0,400,401,3,30,15,0,401,402,5,45,0,0,402,404,1,
        0,0,0,403,397,1,0,0,0,403,398,1,0,0,0,403,399,1,0,0,0,404,53,1,0,
        0,0,405,406,5,53,0,0,406,55,1,0,0,0,407,411,3,58,29,0,408,411,3,
        60,30,0,409,411,3,62,31,0,410,407,1,0,0,0,410,408,1,0,0,0,410,409,
        1,0,0,0,411,57,1,0,0,0,412,413,5,48,0,0,413,414,3,30,15,0,414,415,
        5,49,0,0,415,416,3,56,28,0,416,422,1,0,0,0,417,418,5,48,0,0,418,
        419,3,30,15,0,419,420,5,49,0,0,420,422,1,0,0,0,421,412,1,0,0,0,421,
        417,1,0,0,0,422,59,1,0,0,0,423,424,5,43,0,0,424,425,5,53,0,0,425,
        429,3,58,29,0,426,428,5,61,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,
        427,1,0,0,0,429,430,1,0,0,0,430,435,1,0,0,0,431,429,1,0,0,0,432,
        433,5,43,0,0,433,435,5,53,0,0,434,423,1,0,0,0,434,432,1,0,0,0,435,
        61,1,0,0,0,436,437,5,44,0,0,437,438,3,64,32,0,438,439,5,45,0,0,439,
        440,3,56,28,0,440,446,1,0,0,0,441,442,5,44,0,0,442,443,3,64,32,0,
        443,444,5,45,0,0,444,446,1,0,0,0,445,436,1,0,0,0,445,441,1,0,0,0,
        446,63,1,0,0,0,447,452,3,30,15,0,448,449,5,52,0,0,449,451,3,30,15,
        0,450,448,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,
        0,453,457,1,0,0,0,454,452,1,0,0,0,455,457,1,0,0,0,456,447,1,0,0,
        0,456,455,1,0,0,0,457,65,1,0,0,0,458,459,3,68,34,0,459,460,3,66,
        33,0,460,463,1,0,0,0,461,463,3,68,34,0,462,458,1,0,0,0,462,461,1,
        0,0,0,463,67,1,0,0,0,464,473,3,74,37,0,465,473,3,78,39,0,466,473,
        3,102,51,0,467,473,3,110,55,0,468,473,3,112,56,0,469,473,3,114,57,
        0,470,473,3,116,58,0,471,473,3,118,59,0,472,464,1,0,0,0,472,465,
        1,0,0,0,472,466,1,0,0,0,472,467,1,0,0,0,472,468,1,0,0,0,472,469,
        1,0,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,69,1,0,0,0,474,483,3,
        76,38,0,475,483,3,102,51,0,476,483,3,78,39,0,477,483,3,110,55,0,
        478,483,3,112,56,0,479,483,3,114,57,0,480,483,3,116,58,0,481,483,
        3,118,59,0,482,474,1,0,0,0,482,475,1,0,0,0,482,476,1,0,0,0,482,477,
        1,0,0,0,482,478,1,0,0,0,482,479,1,0,0,0,482,480,1,0,0,0,482,481,
        1,0,0,0,483,71,1,0,0,0,484,492,3,76,38,0,485,492,3,102,51,0,486,
        492,3,110,55,0,487,492,3,112,56,0,488,492,3,114,57,0,489,492,3,116,
        58,0,490,492,3,118,59,0,491,484,1,0,0,0,491,485,1,0,0,0,491,486,
        1,0,0,0,491,487,1,0,0,0,491,488,1,0,0,0,491,489,1,0,0,0,491,490,
        1,0,0,0,492,73,1,0,0,0,493,496,3,126,63,0,494,496,3,130,65,0,495,
        493,1,0,0,0,495,494,1,0,0,0,496,75,1,0,0,0,497,500,3,126,63,0,498,
        500,3,132,66,0,499,497,1,0,0,0,499,498,1,0,0,0,500,77,1,0,0,0,501,
        502,3,84,42,0,502,503,5,36,0,0,503,505,3,30,15,0,504,506,7,6,0,0,
        505,504,1,0,0,0,506,507,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,
        508,559,1,0,0,0,509,510,3,84,42,0,510,511,5,37,0,0,511,513,3,30,
        15,0,512,514,7,6,0,0,513,512,1,0,0,0,514,515,1,0,0,0,515,513,1,0,
        0,0,515,516,1,0,0,0,516,559,1,0,0,0,517,518,3,84,42,0,518,519,5,
        38,0,0,519,521,3,30,15,0,520,522,7,6,0,0,521,520,1,0,0,0,522,523,
        1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,559,1,0,0,0,525,526,
        3,84,42,0,526,527,5,39,0,0,527,529,3,30,15,0,528,530,7,6,0,0,529,
        528,1,0,0,0,530,531,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,
        559,1,0,0,0,533,534,3,84,42,0,534,535,5,40,0,0,535,537,3,30,15,0,
        536,538,7,6,0,0,537,536,1,0,0,0,538,539,1,0,0,0,539,537,1,0,0,0,
        539,540,1,0,0,0,540,559,1,0,0,0,541,542,3,84,42,0,542,543,5,41,0,
        0,543,545,3,30,15,0,544,546,7,6,0,0,545,544,1,0,0,0,546,547,1,0,
        0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,559,1,0,0,0,549,550,3,84,
        42,0,550,551,5,42,0,0,551,553,3,30,15,0,552,554,7,6,0,0,553,552,
        1,0,0,0,554,555,1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,559,
        1,0,0,0,557,559,5,53,0,0,558,501,1,0,0,0,558,509,1,0,0,0,558,517,
        1,0,0,0,558,525,1,0,0,0,558,533,1,0,0,0,558,541,1,0,0,0,558,549,
        1,0,0,0,558,557,1,0,0,0,559,79,1,0,0,0,560,561,3,82,41,0,561,562,
        5,36,0,0,562,564,3,30,15,0,563,565,7,6,0,0,564,563,1,0,0,0,565,566,
        1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,618,1,0,0,0,568,569,
        3,82,41,0,569,570,5,37,0,0,570,572,3,30,15,0,571,573,7,6,0,0,572,
        571,1,0,0,0,573,574,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,
        618,1,0,0,0,576,577,3,82,41,0,577,578,5,38,0,0,578,580,3,30,15,0,
        579,581,7,6,0,0,580,579,1,0,0,0,581,582,1,0,0,0,582,580,1,0,0,0,
        582,583,1,0,0,0,583,618,1,0,0,0,584,585,3,82,41,0,585,586,5,39,0,
        0,586,588,3,30,15,0,587,589,7,6,0,0,588,587,1,0,0,0,589,590,1,0,
        0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,618,1,0,0,0,592,593,3,82,
        41,0,593,594,5,40,0,0,594,596,3,30,15,0,595,597,7,6,0,0,596,595,
        1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,618,
        1,0,0,0,600,601,3,82,41,0,601,602,5,41,0,0,602,604,3,30,15,0,603,
        605,7,6,0,0,604,603,1,0,0,0,605,606,1,0,0,0,606,604,1,0,0,0,606,
        607,1,0,0,0,607,618,1,0,0,0,608,609,3,82,41,0,609,610,5,42,0,0,610,
        612,3,30,15,0,611,613,7,6,0,0,612,611,1,0,0,0,613,614,1,0,0,0,614,
        612,1,0,0,0,614,615,1,0,0,0,615,618,1,0,0,0,616,618,5,53,0,0,617,
        560,1,0,0,0,617,568,1,0,0,0,617,576,1,0,0,0,617,584,1,0,0,0,617,
        592,1,0,0,0,617,600,1,0,0,0,617,608,1,0,0,0,617,616,1,0,0,0,618,
        81,1,0,0,0,619,620,5,53,0,0,620,83,1,0,0,0,621,622,5,53,0,0,622,
        623,3,86,43,0,623,85,1,0,0,0,624,625,5,43,0,0,625,626,5,53,0,0,626,
        635,3,86,43,0,627,628,5,48,0,0,628,629,3,30,15,0,629,630,5,49,0,
        0,630,631,3,86,43,0,631,635,1,0,0,0,632,635,1,0,0,0,633,635,3,144,
        72,0,634,624,1,0,0,0,634,627,1,0,0,0,634,632,1,0,0,0,634,633,1,0,
        0,0,635,87,1,0,0,0,636,637,5,43,0,0,637,638,5,53,0,0,638,642,3,88,
        44,0,639,642,1,0,0,0,640,642,3,128,64,0,641,636,1,0,0,0,641,639,
        1,0,0,0,641,640,1,0,0,0,642,89,1,0,0,0,643,647,3,92,46,0,644,646,
        3,98,49,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,
        1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,650,652,3,94,47,0,651,650,
        1,0,0,0,651,652,1,0,0,0,652,91,1,0,0,0,653,654,5,2,0,0,654,655,5,
        44,0,0,655,656,3,30,15,0,656,660,5,45,0,0,657,659,5,61,0,0,658,657,
        1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,663,
        1,0,0,0,662,660,1,0,0,0,663,664,3,100,50,0,664,93,1,0,0,0,665,669,
        5,3,0,0,666,668,5,61,0,0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,
        1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,669,1,0,0,0,672,673,
        3,96,48,0,673,95,1,0,0,0,674,678,5,46,0,0,675,677,5,61,0,0,676,675,
        1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,
        1,0,0,0,680,678,1,0,0,0,681,685,3,150,75,0,682,684,5,61,0,0,683,
        682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,
        688,1,0,0,0,687,685,1,0,0,0,688,689,5,47,0,0,689,97,1,0,0,0,690,
        691,5,3,0,0,691,692,5,2,0,0,692,693,5,44,0,0,693,694,3,30,15,0,694,
        698,5,45,0,0,695,697,5,61,0,0,696,695,1,0,0,0,697,700,1,0,0,0,698,
        696,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,698,1,0,0,0,701,
        702,3,100,50,0,702,99,1,0,0,0,703,707,5,46,0,0,704,706,5,61,0,0,
        705,704,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,
        708,710,1,0,0,0,709,707,1,0,0,0,710,711,3,70,35,0,711,712,5,47,0,
        0,712,101,1,0,0,0,713,714,5,2,0,0,714,715,5,44,0,0,715,716,3,30,
        15,0,716,720,5,45,0,0,717,719,5,61,0,0,718,717,1,0,0,0,719,722,1,
        0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,
        0,0,0,723,724,3,106,53,0,724,725,5,3,0,0,725,726,3,102,51,0,726,
        764,1,0,0,0,727,728,5,2,0,0,728,729,5,44,0,0,729,730,3,30,15,0,730,
        734,5,45,0,0,731,733,5,61,0,0,732,731,1,0,0,0,733,736,1,0,0,0,734,
        732,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,736,734,1,0,0,0,737,
        748,3,106,53,0,738,742,5,3,0,0,739,741,5,61,0,0,740,739,1,0,0,0,
        741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,
        744,742,1,0,0,0,745,747,3,108,54,0,746,738,1,0,0,0,747,750,1,0,0,
        0,748,746,1,0,0,0,748,749,1,0,0,0,749,764,1,0,0,0,750,748,1,0,0,
        0,751,752,5,2,0,0,752,753,5,44,0,0,753,754,3,30,15,0,754,758,5,45,
        0,0,755,757,5,61,0,0,756,755,1,0,0,0,757,760,1,0,0,0,758,756,1,0,
        0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,3,108,
        54,0,762,764,1,0,0,0,763,713,1,0,0,0,763,727,1,0,0,0,763,751,1,0,
        0,0,764,103,1,0,0,0,765,769,5,46,0,0,766,768,5,61,0,0,767,766,1,
        0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,775,1,
        0,0,0,771,769,1,0,0,0,772,774,3,70,35,0,773,772,1,0,0,0,774,777,
        1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,775,
        1,0,0,0,778,782,5,47,0,0,779,781,7,6,0,0,780,779,1,0,0,0,781,784,
        1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,105,1,0,0,0,784,782,
        1,0,0,0,785,789,5,46,0,0,786,788,5,61,0,0,787,786,1,0,0,0,788,791,
        1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,795,1,0,0,0,791,789,
        1,0,0,0,792,794,3,70,35,0,793,792,1,0,0,0,794,797,1,0,0,0,795,793,
        1,0,0,0,795,796,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,798,800,
        7,6,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,802,
        5,47,0,0,802,107,1,0,0,0,803,807,5,46,0,0,804,806,5,61,0,0,805,804,
        1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,813,
        1,0,0,0,809,807,1,0,0,0,810,812,3,70,35,0,811,810,1,0,0,0,812,815,
        1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,813,
        1,0,0,0,816,818,5,47,0,0,817,819,5,61,0,0,818,817,1,0,0,0,819,820,
        1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,109,1,0,0,0,822,823,
        5,4,0,0,823,824,3,30,15,0,824,825,3,104,52,0,825,879,1,0,0,0,826,
        828,5,4,0,0,827,829,5,15,0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,
        830,1,0,0,0,830,831,3,80,40,0,831,833,3,30,15,0,832,834,7,6,0,0,
        833,832,1,0,0,0,834,835,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,
        836,837,1,0,0,0,837,838,5,53,0,0,838,839,7,7,0,0,839,840,3,30,15,
        0,840,841,3,104,52,0,841,879,1,0,0,0,842,844,5,4,0,0,843,845,5,15,
        0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,3,80,
        40,0,847,848,5,52,0,0,848,850,5,53,0,0,849,851,5,42,0,0,850,849,
        1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,854,5,18,0,0,853,855,
        3,2,1,0,854,853,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,858,
        5,53,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,861,
        3,144,72,0,860,859,1,0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,863,
        3,104,52,0,863,879,1,0,0,0,864,865,5,4,0,0,865,866,5,15,0,0,866,
        867,3,78,39,0,867,869,3,30,15,0,868,870,7,6,0,0,869,868,1,0,0,0,
        870,871,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,
        873,874,5,53,0,0,874,875,7,7,0,0,875,876,3,30,15,0,876,877,3,104,
        52,0,877,879,1,0,0,0,878,822,1,0,0,0,878,826,1,0,0,0,878,842,1,0,
        0,0,878,864,1,0,0,0,879,111,1,0,0,0,880,882,5,17,0,0,881,883,7,6,
        0,0,882,881,1,0,0,0,883,884,1,0,0,0,884,882,1,0,0,0,884,885,1,0,
        0,0,885,113,1,0,0,0,886,888,5,16,0,0,887,889,7,6,0,0,888,887,1,0,
        0,0,889,890,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,115,1,0,
        0,0,892,894,3,48,24,0,893,895,7,6,0,0,894,893,1,0,0,0,895,896,1,
        0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,117,1,0,0,0,898,899,5,
        5,0,0,899,901,3,30,15,0,900,902,7,6,0,0,901,900,1,0,0,0,902,903,
        1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,912,1,0,0,0,905,907,
        5,5,0,0,906,908,7,6,0,0,907,906,1,0,0,0,908,909,1,0,0,0,909,907,
        1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,898,1,0,0,0,911,905,
        1,0,0,0,912,119,1,0,0,0,913,920,3,136,68,0,914,920,3,126,63,0,915,
        920,3,130,65,0,916,920,3,154,77,0,917,920,3,164,82,0,918,920,3,170,
        85,0,919,913,1,0,0,0,919,914,1,0,0,0,919,915,1,0,0,0,919,916,1,0,
        0,0,919,917,1,0,0,0,919,918,1,0,0,0,920,121,1,0,0,0,921,928,3,126,
        63,0,922,928,3,132,66,0,923,928,3,136,68,0,924,928,3,154,77,0,925,
        928,3,164,82,0,926,928,3,170,85,0,927,921,1,0,0,0,927,922,1,0,0,
        0,927,923,1,0,0,0,927,924,1,0,0,0,927,925,1,0,0,0,927,926,1,0,0,
        0,928,123,1,0,0,0,929,934,3,126,63,0,930,934,3,130,65,0,931,934,
        3,164,82,0,932,934,3,170,85,0,933,929,1,0,0,0,933,930,1,0,0,0,933,
        931,1,0,0,0,933,932,1,0,0,0,934,125,1,0,0,0,935,936,5,15,0,0,936,
        937,5,53,0,0,937,938,3,128,64,0,938,939,5,36,0,0,939,941,3,30,15,
        0,940,942,7,6,0,0,941,940,1,0,0,0,942,943,1,0,0,0,943,941,1,0,0,
        0,943,944,1,0,0,0,944,994,1,0,0,0,945,946,5,15,0,0,946,947,5,53,
        0,0,947,948,5,36,0,0,948,950,3,30,15,0,949,951,7,6,0,0,950,949,1,
        0,0,0,951,952,1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,994,1,
        0,0,0,954,955,5,15,0,0,955,956,5,53,0,0,956,958,3,128,64,0,957,959,
        7,6,0,0,958,957,1,0,0,0,959,960,1,0,0,0,960,958,1,0,0,0,960,961,
        1,0,0,0,961,994,1,0,0,0,962,963,5,15,0,0,963,964,5,53,0,0,964,965,
        3,128,64,0,965,966,5,36,0,0,966,967,5,53,0,0,967,969,3,30,15,0,968,
        970,7,6,0,0,969,968,1,0,0,0,970,971,1,0,0,0,971,969,1,0,0,0,971,
        972,1,0,0,0,972,994,1,0,0,0,973,974,5,15,0,0,974,975,5,53,0,0,975,
        976,3,144,72,0,976,977,3,128,64,0,977,978,5,36,0,0,978,980,3,30,
        15,0,979,981,7,6,0,0,980,979,1,0,0,0,981,982,1,0,0,0,982,980,1,0,
        0,0,982,983,1,0,0,0,983,994,1,0,0,0,984,985,5,15,0,0,985,986,5,53,
        0,0,986,987,3,144,72,0,987,989,3,128,64,0,988,990,7,6,0,0,989,988,
        1,0,0,0,990,991,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,994,
        1,0,0,0,993,935,1,0,0,0,993,945,1,0,0,0,993,954,1,0,0,0,993,962,
        1,0,0,0,993,973,1,0,0,0,993,984,1,0,0,0,994,127,1,0,0,0,995,996,
        7,8,0,0,996,129,1,0,0,0,997,998,5,14,0,0,998,999,5,53,0,0,999,1000,
        5,36,0,0,1000,1002,3,134,67,0,1001,1003,7,6,0,0,1002,1001,1,0,0,
        0,1003,1004,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,131,
        1,0,0,0,1006,1007,5,14,0,0,1007,1008,5,53,0,0,1008,1009,5,36,0,0,
        1009,1011,3,134,67,0,1010,1012,7,6,0,0,1011,1010,1,0,0,0,1012,1013,
        1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,1014,133,1,0,0,0,1015,
        1016,3,30,15,0,1016,135,1,0,0,0,1017,1018,5,6,0,0,1018,1019,5,53,
        0,0,1019,1021,5,44,0,0,1020,1022,3,138,69,0,1021,1020,1,0,0,0,1021,
        1022,1,0,0,0,1022,1023,1,0,0,0,1023,1025,5,45,0,0,1024,1026,3,144,
        72,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,
        1029,5,53,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,
        0,0,1030,1031,3,148,74,0,1031,137,1,0,0,0,1032,1033,3,140,70,0,1033,
        1034,3,128,64,0,1034,1040,1,0,0,0,1035,1036,3,140,70,0,1036,1037,
        5,52,0,0,1037,1038,3,138,69,0,1038,1040,1,0,0,0,1039,1032,1,0,0,
        0,1039,1035,1,0,0,0,1040,139,1,0,0,0,1041,1042,5,53,0,0,1042,1043,
        3,142,71,0,1043,141,1,0,0,0,1044,1051,3,128,64,0,1045,1046,5,48,
        0,0,1046,1047,5,54,0,0,1047,1048,5,49,0,0,1048,1051,3,142,71,0,1049,
        1051,1,0,0,0,1050,1044,1,0,0,0,1050,1045,1,0,0,0,1050,1049,1,0,0,
        0,1051,143,1,0,0,0,1052,1058,3,128,64,0,1053,1055,3,146,73,0,1054,
        1056,5,53,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,
        0,0,1057,1052,1,0,0,0,1057,1053,1,0,0,0,1058,145,1,0,0,0,1059,1060,
        5,48,0,0,1060,1061,5,54,0,0,1061,1062,5,49,0,0,1062,1063,5,48,0,
        0,1063,1064,5,54,0,0,1064,1066,5,49,0,0,1065,1067,5,53,0,0,1066,
        1065,1,0,0,0,1066,1067,1,0,0,0,1067,1078,1,0,0,0,1068,1069,5,48,
        0,0,1069,1070,5,54,0,0,1070,1072,5,49,0,0,1071,1073,5,53,0,0,1072,
        1071,1,0,0,0,1072,1073,1,0,0,0,1073,1075,1,0,0,0,1074,1076,3,128,
        64,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1078,1,0,0,0,1077,
        1059,1,0,0,0,1077,1068,1,0,0,0,1078,147,1,0,0,0,1079,1083,5,46,0,
        0,1080,1082,5,61,0,0,1081,1080,1,0,0,0,1082,1085,1,0,0,0,1083,1081,
        1,0,0,0,1083,1084,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1086,
        1088,3,150,75,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,
        0,0,0,1089,1091,5,47,0,0,1090,1092,7,6,0,0,1091,1090,1,0,0,0,1092,
        1093,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,149,1,0,0,
        0,1095,1096,3,70,35,0,1096,1097,3,150,75,0,1097,1100,1,0,0,0,1098,
        1100,3,70,35,0,1099,1095,1,0,0,0,1099,1098,1,0,0,0,1100,151,1,0,
        0,0,1101,1107,3,68,34,0,1102,1103,3,68,34,0,1103,1104,3,176,88,0,
        1104,1105,3,152,76,0,1105,1107,1,0,0,0,1106,1101,1,0,0,0,1106,1102,
        1,0,0,0,1107,153,1,0,0,0,1108,1109,5,6,0,0,1109,1110,5,44,0,0,1110,
        1111,3,160,80,0,1111,1113,5,45,0,0,1112,1114,5,53,0,0,1113,1112,
        1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,5,44,0,0,1116,
        1118,3,156,78,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,
        0,0,0,1119,1120,5,45,0,0,1120,1121,3,144,72,0,1121,1122,3,148,74,
        0,1122,1189,1,0,0,0,1123,1124,5,6,0,0,1124,1125,5,44,0,0,1125,1126,
        3,160,80,0,1126,1128,5,45,0,0,1127,1129,5,53,0,0,1128,1127,1,0,0,
        0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,1132,5,44,0,0,1131,1133,
        3,156,78,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,
        1134,1135,5,45,0,0,1135,1136,5,53,0,0,1136,1137,3,148,74,0,1137,
        1189,1,0,0,0,1138,1139,5,6,0,0,1139,1140,5,44,0,0,1140,1141,3,160,
        80,0,1141,1143,5,45,0,0,1142,1144,5,53,0,0,1143,1142,1,0,0,0,1143,
        1144,1,0,0,0,1144,1145,1,0,0,0,1145,1146,5,44,0,0,1146,1147,3,156,
        78,0,1147,1148,5,45,0,0,1148,1149,3,148,74,0,1149,1189,1,0,0,0,1150,
        1151,5,6,0,0,1151,1152,5,44,0,0,1152,1153,3,160,80,0,1153,1155,5,
        45,0,0,1154,1156,5,53,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,
        1157,1,0,0,0,1157,1158,5,44,0,0,1158,1159,3,156,78,0,1159,1160,5,
        45,0,0,1160,1161,3,148,74,0,1161,1189,1,0,0,0,1162,1163,5,6,0,0,
        1163,1164,5,44,0,0,1164,1165,3,160,80,0,1165,1167,5,45,0,0,1166,
        1168,5,53,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,
        0,0,1169,1170,5,44,0,0,1170,1171,5,45,0,0,1171,1172,3,148,74,0,1172,
        1189,1,0,0,0,1173,1174,5,6,0,0,1174,1175,5,53,0,0,1175,1176,5,44,
        0,0,1176,1177,5,45,0,0,1177,1189,3,148,74,0,1178,1179,5,6,0,0,1179,
        1180,5,44,0,0,1180,1181,3,162,81,0,1181,1182,5,45,0,0,1182,1183,
        5,53,0,0,1183,1184,5,44,0,0,1184,1185,5,45,0,0,1185,1186,3,144,72,
        0,1186,1187,3,148,74,0,1187,1189,1,0,0,0,1188,1108,1,0,0,0,1188,
        1123,1,0,0,0,1188,1138,1,0,0,0,1188,1150,1,0,0,0,1188,1162,1,0,0,
        0,1188,1173,1,0,0,0,1188,1178,1,0,0,0,1189,155,1,0,0,0,1190,1195,
        3,158,79,0,1191,1192,5,52,0,0,1192,1194,3,158,79,0,1193,1191,1,0,
        0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,1,0,0,0,1196,157,
        1,0,0,0,1197,1195,1,0,0,0,1198,1200,5,53,0,0,1199,1201,3,144,72,
        0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,159,1,0,0,0,1202,1204,
        5,53,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,
        1207,5,53,0,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,161,1,0,0,
        0,1208,1209,5,53,0,0,1209,1210,5,53,0,0,1210,163,1,0,0,0,1211,1212,
        5,7,0,0,1212,1213,5,53,0,0,1213,1214,5,8,0,0,1214,1218,5,46,0,0,
        1215,1217,5,61,0,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,1216,
        1,0,0,0,1218,1219,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1221,
        1223,3,168,84,0,1222,1221,1,0,0,0,1223,1224,1,0,0,0,1224,1222,1,
        0,0,0,1224,1225,1,0,0,0,1225,1229,1,0,0,0,1226,1228,5,61,0,0,1227,
        1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,
        0,1230,1232,1,0,0,0,1231,1229,1,0,0,0,1232,1233,5,47,0,0,1233,1234,
        7,6,0,0,1234,165,1,0,0,0,1235,1240,3,168,84,0,1236,1237,7,6,0,0,
        1237,1239,3,168,84,0,1238,1236,1,0,0,0,1239,1242,1,0,0,0,1240,1238,
        1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,0,1242,1240,1,0,0,0,1243,
        1244,5,50,0,0,1244,1247,1,0,0,0,1245,1247,3,144,72,0,1246,1235,1,
        0,0,0,1246,1245,1,0,0,0,1247,167,1,0,0,0,1248,1249,5,53,0,0,1249,
        1251,3,144,72,0,1250,1252,7,6,0,0,1251,1250,1,0,0,0,1252,1253,1,
        0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,1257,1,0,0,0,1255,
        1257,3,124,62,0,1256,1248,1,0,0,0,1256,1255,1,0,0,0,1257,169,1,0,
        0,0,1258,1259,5,7,0,0,1259,1260,5,53,0,0,1260,1261,5,9,0,0,1261,
        1265,5,46,0,0,1262,1264,5,61,0,0,1263,1262,1,0,0,0,1264,1267,1,0,
        0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1269,1,0,0,0,1267,1265,
        1,0,0,0,1268,1270,3,178,89,0,1269,1268,1,0,0,0,1270,1271,1,0,0,0,
        1271,1269,1,0,0,0,1271,1272,1,0,0,0,1272,1276,1,0,0,0,1273,1275,
        5,61,0,0,1274,1273,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1276,
        1277,1,0,0,0,1277,1279,1,0,0,0,1278,1276,1,0,0,0,1279,1281,5,47,
        0,0,1280,1282,7,6,0,0,1281,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1281,
        1,0,0,0,1283,1284,1,0,0,0,1284,171,1,0,0,0,1285,1289,1,0,0,0,1286,
        1287,5,61,0,0,1287,1289,3,172,86,0,1288,1285,1,0,0,0,1288,1286,1,
        0,0,0,1289,173,1,0,0,0,1290,1291,3,178,89,0,1291,175,1,0,0,0,1292,
        1296,5,61,0,0,1293,1294,5,61,0,0,1294,1296,3,176,88,0,1295,1292,
        1,0,0,0,1295,1293,1,0,0,0,1296,177,1,0,0,0,1297,1298,5,53,0,0,1298,
        1300,5,44,0,0,1299,1301,3,138,69,0,1300,1299,1,0,0,0,1300,1301,1,
        0,0,0,1301,1302,1,0,0,0,1302,1304,5,45,0,0,1303,1305,3,144,72,0,
        1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1307,1,0,0,0,1306,1308,
        7,6,0,0,1307,1306,1,0,0,0,1308,1309,1,0,0,0,1309,1307,1,0,0,0,1309,
        1310,1,0,0,0,1310,179,1,0,0,0,1311,1312,5,53,0,0,1312,1314,5,44,
        0,0,1313,1315,3,138,69,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,
        1316,1,0,0,0,1316,1318,5,45,0,0,1317,1319,3,144,72,0,1318,1317,1,
        0,0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1322,5,50,0,0,1321,
        1320,1,0,0,0,1321,1322,1,0,0,0,1322,181,1,0,0,0,150,185,191,193,
        209,222,235,252,268,274,283,290,299,310,322,333,344,355,366,377,
        383,395,403,410,421,429,434,445,452,456,462,472,482,491,495,499,
        507,515,523,531,539,547,555,558,566,574,582,590,598,606,614,617,
        634,641,647,651,660,669,678,685,698,707,720,734,742,748,758,763,
        769,775,782,789,795,799,807,813,820,828,835,844,850,854,857,860,
        871,878,884,890,896,903,909,911,919,927,933,943,952,960,971,982,
        991,993,1004,1013,1021,1025,1028,1039,1050,1055,1057,1066,1072,1075,
        1077,1083,1087,1093,1099,1106,1113,1117,1128,1132,1143,1155,1167,
        1188,1195,1200,1203,1206,1218,1224,1229,1240,1246,1253,1256,1265,
        1271,1276,1283,1288,1295,1300,1304,1309,1314,1318,1321
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'str'", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
                     "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "':='", "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "';'", "':'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "IF", "ELSE", "FOR", "RETURN", 
                      "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                      "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                      "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
                      "DIV", "MOD", "EQUAL", "NOTEQUAL", "LESS", "LESSEQUAL", 
                      "GREATER", "GREATEREQUAL", "AND", "OR", "NOT", "ASSIGN", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "COLON_ASSIGN", "DOT", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COLON", 
                      "COMMA", "ID", "INT_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
                      "REAL", "ILLEGAL_ESCAPE", "STRING_LIT", "NEWLINE", 
                      "WS", "MULTI_COMMENT", "LINE_COMMENT", "UNCLOSE_STRING", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_literal = 1
    RULE_literal1 = 2
    RULE_literal3 = 3
    RULE_literal4 = 4
    RULE_array_literal = 5
    RULE_array_literal_rest = 6
    RULE_arraySupport = 7
    RULE_literal3List = 8
    RULE_struct_literalSP = 9
    RULE_struct_literal = 10
    RULE_struct_literal3 = 11
    RULE_field_init_list = 12
    RULE_field_init = 13
    RULE_list_expression = 14
    RULE_expression = 15
    RULE_logicalOrExpr = 16
    RULE_logicalAndExpr = 17
    RULE_equalityExpr = 18
    RULE_relationalExpr = 19
    RULE_additiveExpr = 20
    RULE_multiplicativeExpr = 21
    RULE_unaryExpr = 22
    RULE_primaryExpr = 23
    RULE_primaryExpr1 = 24
    RULE_postfixOps = 25
    RULE_basePrimary = 26
    RULE_basePrimary1 = 27
    RULE_postfixOp = 28
    RULE_arrayAccess = 29
    RULE_memberAccess = 30
    RULE_functionCall = 31
    RULE_argumentList = 32
    RULE_list_statement = 33
    RULE_statement = 34
    RULE_statement2 = 35
    RULE_statement3 = 36
    RULE_declared_statement = 37
    RULE_declared_statement2 = 38
    RULE_assign_statement = 39
    RULE_assign_statement2 = 40
    RULE_assignable2 = 41
    RULE_assignable = 42
    RULE_tail = 43
    RULE_tail2 = 44
    RULE_if_block = 45
    RULE_if_statement1 = 46
    RULE_else_statement = 47
    RULE_bodyBLOCK = 48
    RULE_else_if_statement = 49
    RULE_conditional_body_block = 50
    RULE_if_statement = 51
    RULE_block = 52
    RULE_blockIF = 53
    RULE_blockIF2 = 54
    RULE_for_statement = 55
    RULE_break_statement = 56
    RULE_continue_statement = 57
    RULE_call_statement = 58
    RULE_return_statement = 59
    RULE_declared = 60
    RULE_declared2 = 61
    RULE_declared3 = 62
    RULE_variables_declared = 63
    RULE_type_spec = 64
    RULE_constants_declared = 65
    RULE_constants_declared2 = 66
    RULE_constant_expression = 67
    RULE_function_declared = 68
    RULE_parameter_list = 69
    RULE_parameter = 70
    RULE_parameter_type = 71
    RULE_return_type = 72
    RULE_array_type = 73
    RULE_function_body = 74
    RULE_statement_with_newlines = 75
    RULE_statement_list = 76
    RULE_method_declared = 77
    RULE_parameter_list2 = 78
    RULE_parameter2 = 79
    RULE_receiver = 80
    RULE_receiver2 = 81
    RULE_struct_declared = 82
    RULE_field_list = 83
    RULE_field = 84
    RULE_interface_declared = 85
    RULE_optional_newlines = 86
    RULE_method_list = 87
    RULE_recursive_newlines = 88
    RULE_method_decl = 89
    RULE_method_signature = 90

    ruleNames =  [ "program", "literal", "literal1", "literal3", "literal4", 
                   "array_literal", "array_literal_rest", "arraySupport", 
                   "literal3List", "struct_literalSP", "struct_literal", 
                   "struct_literal3", "field_init_list", "field_init", "list_expression", 
                   "expression", "logicalOrExpr", "logicalAndExpr", "equalityExpr", 
                   "relationalExpr", "additiveExpr", "multiplicativeExpr", 
                   "unaryExpr", "primaryExpr", "primaryExpr1", "postfixOps", 
                   "basePrimary", "basePrimary1", "postfixOp", "arrayAccess", 
                   "memberAccess", "functionCall", "argumentList", "list_statement", 
                   "statement", "statement2", "statement3", "declared_statement", 
                   "declared_statement2", "assign_statement", "assign_statement2", 
                   "assignable2", "assignable", "tail", "tail2", "if_block", 
                   "if_statement1", "else_statement", "bodyBLOCK", "else_if_statement", 
                   "conditional_body_block", "if_statement", "block", "blockIF", 
                   "blockIF2", "for_statement", "break_statement", "continue_statement", 
                   "call_statement", "return_statement", "declared", "declared2", 
                   "declared3", "variables_declared", "type_spec", "constants_declared", 
                   "constants_declared2", "constant_expression", "function_declared", 
                   "parameter_list", "parameter", "parameter_type", "return_type", 
                   "array_type", "function_body", "statement_with_newlines", 
                   "statement_list", "method_declared", "parameter_list2", 
                   "parameter2", "receiver", "receiver2", "struct_declared", 
                   "field_list", "field", "interface_declared", "optional_newlines", 
                   "method_list", "recursive_newlines", "method_decl", "method_signature" ]

    EOF = Token.EOF
    T__0=1
    IF=2
    ELSE=3
    FOR=4
    RETURN=5
    FUNC=6
    TYPE=7
    STRUCT=8
    INTERFACE=9
    STRING=10
    INT=11
    FLOAT=12
    BOOLEAN=13
    CONST=14
    VAR=15
    CONTINUE=16
    BREAK=17
    RANGE=18
    NIL=19
    TRUE=20
    FALSE=21
    ADD=22
    SUB=23
    MUL=24
    DIV=25
    MOD=26
    EQUAL=27
    NOTEQUAL=28
    LESS=29
    LESSEQUAL=30
    GREATER=31
    GREATEREQUAL=32
    AND=33
    OR=34
    NOT=35
    ASSIGN=36
    ADD_ASSIGN=37
    SUB_ASSIGN=38
    MUL_ASSIGN=39
    DIV_ASSIGN=40
    MOD_ASSIGN=41
    COLON_ASSIGN=42
    DOT=43
    LPAREN=44
    RPAREN=45
    LBRACE=46
    RBRACE=47
    LBRACK=48
    RBRACK=49
    SEMI=50
    COLON=51
    COMMA=52
    ID=53
    INT_LIT=54
    BIN_LIT=55
    OCT_LIT=56
    HEX_LIT=57
    REAL=58
    ILLEGAL_ESCAPE=59
    STRING_LIT=60
    NEWLINE=61
    WS=62
    MULTI_COMMENT=63
    LINE_COMMENT=64
    UNCLOSE_STRING=65
    ERROR_CHAR=66

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclaredContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclaredContext,i)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 182
                self.match(MiniGoParser.NEWLINE)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.declared()
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305843009213743296) != 0):
                self.state = 191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6, 7, 14, 15]:
                    self.state = 189
                    self.declared()
                    pass
                elif token in [61]:
                    self.state = 190
                    self.match(MiniGoParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_literal)
        try:
            self.state = 209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.match(MiniGoParser.REAL)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(MiniGoParser.HEX_LIT)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 5)
                self.state = 202
                self.match(MiniGoParser.OCT_LIT)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 203
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 7)
                self.state = 204
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 8)
                self.state = 205
                self.array_literal()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 9)
                self.state = 206
                self.struct_literal()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 10)
                self.state = 207
                self.match(MiniGoParser.BIN_LIT)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 11)
                self.state = 208
                self.match(MiniGoParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal1




    def literal1(self):

        localctx = MiniGoParser.Literal1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_literal1)
        try:
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.match(MiniGoParser.REAL)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 213
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 214
                self.match(MiniGoParser.HEX_LIT)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 5)
                self.state = 215
                self.match(MiniGoParser.OCT_LIT)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 216
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 7)
                self.state = 217
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 8)
                self.state = 218
                self.array_literal()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 9)
                self.state = 219
                self.struct_literal()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 10)
                self.state = 220
                self.match(MiniGoParser.BIN_LIT)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 11)
                self.state = 221
                self.match(MiniGoParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def REAL(self):
            return self.getToken(MiniGoParser.REAL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def struct_literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal3Context,0)


        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal3




    def literal3(self):

        localctx = MiniGoParser.Literal3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_literal3)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.match(MiniGoParser.INT_LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(MiniGoParser.REAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.match(MiniGoParser.HEX_LIT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 228
                self.match(MiniGoParser.OCT_LIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 229
                self.match(MiniGoParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 230
                self.match(MiniGoParser.FALSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 231
                self.struct_literal3()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 232
                self.match(MiniGoParser.BIN_LIT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 233
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 234
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal4




    def literal4(self):

        localctx = MiniGoParser.Literal4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_literal4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def literal4(self):
            return self.getTypedRuleContext(MiniGoParser.Literal4Context,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def array_literal_rest(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_restContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(MiniGoParser.LBRACK)
            self.state = 240
            self.literal4()
            self.state = 241
            self.match(MiniGoParser.RBRACK)
            self.state = 242
            self.array_literal_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def literal4(self):
            return self.getTypedRuleContext(MiniGoParser.Literal4Context,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def array_literal_rest(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_restContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def arraySupport(self):
            return self.getTypedRuleContext(MiniGoParser.ArraySupportContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_rest




    def array_literal_rest(self):

        localctx = MiniGoParser.Array_literal_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_array_literal_rest)
        try:
            self.state = 252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(MiniGoParser.LBRACK)
                self.state = 245
                self.literal4()
                self.state = 246
                self.match(MiniGoParser.RBRACK)
                self.state = 247
                self.array_literal_rest()
                pass
            elif token in [1, 10, 11, 12, 13, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.type_spec()
                self.state = 250
                self.arraySupport()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraySupportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def literal3List(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3ListContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arraySupport




    def arraySupport(self):

        localctx = MiniGoParser.ArraySupportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arraySupport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(MiniGoParser.LBRACE)
            self.state = 255
            self.literal3List()
            self.state = 256
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal3ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3Context,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def literal3List(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3ListContext,0)


        def arraySupport(self):
            return self.getTypedRuleContext(MiniGoParser.ArraySupportContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal3List




    def literal3List(self):

        localctx = MiniGoParser.Literal3ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_literal3List)
        try:
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.literal3()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.literal3()
                self.state = 260
                self.match(MiniGoParser.COMMA)
                self.state = 261
                self.literal3List()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 263
                self.arraySupport()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 264
                self.arraySupport()
                self.state = 265
                self.match(MiniGoParser.COMMA)
                self.state = 266
                self.literal3List()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalSPContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def literal3(self):
            return self.getTypedRuleContext(MiniGoParser.Literal3Context,0)


        def field_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_init_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literalSP




    def struct_literalSP(self):

        localctx = MiniGoParser.Struct_literalSPContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_struct_literalSP)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(MiniGoParser.ID)
            self.state = 271
            self.match(MiniGoParser.LBRACE)
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 272
                self.literal3()
                pass

            elif la_ == 2:
                self.state = 273
                self.field_init_list()
                pass


            self.state = 276
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_literalSP(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalSPContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.struct_literalSP()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_literalSP(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalSPContext,0)


        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LBRACE)
            else:
                return self.getToken(MiniGoParser.LBRACE, i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RBRACE)
            else:
                return self.getToken(MiniGoParser.RBRACE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal3




    def struct_literal3(self):

        localctx = MiniGoParser.Struct_literal3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_struct_literal3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 280
                self.match(MiniGoParser.LBRACE)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.struct_literalSP()
            self.state = 290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 287
                    self.match(MiniGoParser.RBRACE) 
                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_init_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_init_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init_list




    def field_init_list(self):

        localctx = MiniGoParser.Field_init_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_field_init_list)
        try:
            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.field_init()
                self.state = 294
                self.match(MiniGoParser.COMMA)
                self.state = 295
                self.field_init_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.field_init()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(MiniGoParser.ID)
            self.state = 302
            self.match(MiniGoParser.COLON)
            self.state = 303
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_expression(self):
            return self.getTypedRuleContext(MiniGoParser.List_expressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_expression




    def list_expression(self):

        localctx = MiniGoParser.List_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_list_expression)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.expression()
                self.state = 306
                self.match(MiniGoParser.COMMA)
                self.state = 307
                self.list_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalOrExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression




    def expression(self):

        localctx = MiniGoParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.logicalOrExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalAndExprContext,0)


        def logicalOrExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalOrExprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logicalOrExpr



    def logicalOrExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.LogicalOrExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_logicalOrExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.logicalAndExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.LogicalOrExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpr)
                    self.state = 317
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 318
                    self.match(MiniGoParser.OR)
                    self.state = 319
                    self.logicalAndExpr(0) 
                self.state = 324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpr(self):
            return self.getTypedRuleContext(MiniGoParser.EqualityExprContext,0)


        def logicalAndExpr(self):
            return self.getTypedRuleContext(MiniGoParser.LogicalAndExprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logicalAndExpr



    def logicalAndExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.LogicalAndExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_logicalAndExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.equalityExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.LogicalAndExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpr)
                    self.state = 328
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 329
                    self.match(MiniGoParser.AND)
                    self.state = 330
                    self.equalityExpr(0) 
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpr(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalExprContext,0)


        def equalityExpr(self):
            return self.getTypedRuleContext(MiniGoParser.EqualityExprContext,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(MiniGoParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_equalityExpr



    def equalityExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.EqualityExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_equalityExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.relationalExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.EqualityExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpr)
                    self.state = 339
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 340
                    _la = self._input.LA(1)
                    if not(_la==27 or _la==28):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 341
                    self.relationalExpr(0) 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpr(self):
            return self.getTypedRuleContext(MiniGoParser.AdditiveExprContext,0)


        def relationalExpr(self):
            return self.getTypedRuleContext(MiniGoParser.RelationalExprContext,0)


        def LESS(self):
            return self.getToken(MiniGoParser.LESS, 0)

        def GREATER(self):
            return self.getToken(MiniGoParser.GREATER, 0)

        def LESSEQUAL(self):
            return self.getToken(MiniGoParser.LESSEQUAL, 0)

        def GREATEREQUAL(self):
            return self.getToken(MiniGoParser.GREATEREQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relationalExpr



    def relationalExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.RelationalExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_relationalExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.additiveExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.RelationalExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpr)
                    self.state = 350
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 351
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8053063680) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 352
                    self.additiveExpr(0) 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpr(self):
            return self.getTypedRuleContext(MiniGoParser.MultiplicativeExprContext,0)


        def additiveExpr(self):
            return self.getTypedRuleContext(MiniGoParser.AdditiveExprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additiveExpr



    def additiveExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.AdditiveExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_additiveExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.multiplicativeExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.AdditiveExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpr)
                    self.state = 361
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 362
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==23):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 363
                    self.multiplicativeExpr(0) 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.UnaryExprContext,0)


        def multiplicativeExpr(self):
            return self.getTypedRuleContext(MiniGoParser.MultiplicativeExprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicativeExpr



    def multiplicativeExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.MultiplicativeExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_multiplicativeExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.unaryExpr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.MultiplicativeExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpr)
                    self.state = 372
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 373
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 117440512) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 374
                    self.unaryExpr() 
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.UnaryExprContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def primaryExpr(self):
            return self.getTypedRuleContext(MiniGoParser.PrimaryExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_unaryExpr




    def unaryExpr(self):

        localctx = MiniGoParser.UnaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unaryExpr)
        self._la = 0 # Token type
        try:
            self.state = 383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                _la = self._input.LA(1)
                if not(_la==23 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 381
                self.unaryExpr()
                pass
            elif token in [19, 20, 21, 44, 48, 53, 54, 55, 56, 57, 58, 60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.primaryExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basePrimary(self):
            return self.getTypedRuleContext(MiniGoParser.BasePrimaryContext,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primaryExpr




    def primaryExpr(self):

        localctx = MiniGoParser.PrimaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_primaryExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.basePrimary()
            self.state = 386
            self.postfixOps()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basePrimary1(self):
            return self.getTypedRuleContext(MiniGoParser.BasePrimary1Context,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primaryExpr1




    def primaryExpr1(self):

        localctx = MiniGoParser.PrimaryExpr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_primaryExpr1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.basePrimary1()
            self.state = 389
            self.postfixOps()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def postfixOps(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_postfixOps




    def postfixOps(self):

        localctx = MiniGoParser.PostfixOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_postfixOps)
        try:
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.postfixOp()
                self.state = 392
                self.postfixOps()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasePrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal1(self):
            return self.getTypedRuleContext(MiniGoParser.Literal1Context,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_basePrimary




    def basePrimary(self):

        localctx = MiniGoParser.BasePrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_basePrimary)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.literal1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 399
                self.match(MiniGoParser.LPAREN)
                self.state = 400
                self.expression()
                self.state = 401
                self.match(MiniGoParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasePrimary1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_basePrimary1




    def basePrimary1(self):

        localctx = MiniGoParser.BasePrimary1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_basePrimary1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayAccessContext,0)


        def memberAccess(self):
            return self.getTypedRuleContext(MiniGoParser.MemberAccessContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MiniGoParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_postfixOp




    def postfixOp(self):

        localctx = MiniGoParser.PostfixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_postfixOp)
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.arrayAccess()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.memberAccess()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.functionCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrayAccess




    def arrayAccess(self):

        localctx = MiniGoParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arrayAccess)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.match(MiniGoParser.LBRACK)
                self.state = 413
                self.expression()
                self.state = 414
                self.match(MiniGoParser.RBRACK)
                self.state = 415
                self.postfixOp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.match(MiniGoParser.LBRACK)
                self.state = 418
                self.expression()
                self.state = 419
                self.match(MiniGoParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayAccessContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_memberAccess




    def memberAccess(self):

        localctx = MiniGoParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_memberAccess)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(MiniGoParser.DOT)
                self.state = 424
                self.match(MiniGoParser.ID)
                self.state = 425
                self.arrayAccess()
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 426
                        self.match(MiniGoParser.NEWLINE) 
                    self.state = 431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(MiniGoParser.DOT)
                self.state = 433
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(MiniGoParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def postfixOp(self):
            return self.getTypedRuleContext(MiniGoParser.PostfixOpContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_functionCall




    def functionCall(self):

        localctx = MiniGoParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionCall)
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(MiniGoParser.LPAREN)
                self.state = 437
                self.argumentList()
                self.state = 438
                self.match(MiniGoParser.RPAREN)
                self.state = 439
                self.postfixOp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.match(MiniGoParser.LPAREN)
                self.state = 442
                self.argumentList()
                self.state = 443
                self.match(MiniGoParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_argumentList




    def argumentList(self):

        localctx = MiniGoParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 23, 35, 44, 48, 53, 54, 55, 56, 57, 58, 60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.expression()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52:
                    self.state = 448
                    self.match(MiniGoParser.COMMA)
                    self.state = 449
                    self.expression()
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_list_statement)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.statement()
                self.state = 459
                self.list_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 464
                self.declared_statement()
                pass

            elif la_ == 2:
                self.state = 465
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 466
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 467
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 468
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 469
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 470
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 471
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statement2Context,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement2




    def statement2(self):

        localctx = MiniGoParser.Statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 474
                self.declared_statement2()
                pass

            elif la_ == 2:
                self.state = 475
                self.if_statement()
                pass

            elif la_ == 3:
                self.state = 476
                self.assign_statement()
                pass

            elif la_ == 4:
                self.state = 477
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 478
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 479
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 480
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 481
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statement2Context,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement3




    def statement3(self):

        localctx = MiniGoParser.Statement3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_statement3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 15]:
                self.state = 484
                self.declared_statement2()
                pass
            elif token in [2]:
                self.state = 485
                self.if_statement()
                pass
            elif token in [4]:
                self.state = 486
                self.for_statement()
                pass
            elif token in [17]:
                self.state = 487
                self.break_statement()
                pass
            elif token in [16]:
                self.state = 488
                self.continue_statement()
                pass
            elif token in [53]:
                self.state = 489
                self.call_statement()
                pass
            elif token in [5]:
                self.state = 490
                self.return_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_declared_statement)
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.variables_declared()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.constants_declared()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared2(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declared2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement2




    def declared_statement2(self):

        localctx = MiniGoParser.Declared_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_declared_statement2)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.variables_declared()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.constants_declared2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(MiniGoParser.AssignableContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.assignable()
                self.state = 502
                self.match(MiniGoParser.ASSIGN)
                self.state = 503
                self.expression()
                self.state = 505 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 504
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 507 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.assignable()
                self.state = 510
                self.match(MiniGoParser.ADD_ASSIGN)
                self.state = 511
                self.expression()
                self.state = 513 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 512
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 515 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 517
                self.assignable()
                self.state = 518
                self.match(MiniGoParser.SUB_ASSIGN)
                self.state = 519
                self.expression()
                self.state = 521 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 520
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 523 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 525
                self.assignable()
                self.state = 526
                self.match(MiniGoParser.MUL_ASSIGN)
                self.state = 527
                self.expression()
                self.state = 529 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 528
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 531 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.assignable()
                self.state = 534
                self.match(MiniGoParser.DIV_ASSIGN)
                self.state = 535
                self.expression()
                self.state = 537 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 536
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 539 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 541
                self.assignable()
                self.state = 542
                self.match(MiniGoParser.MOD_ASSIGN)
                self.state = 543
                self.expression()
                self.state = 545 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 544
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 547 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 549
                self.assignable()
                self.state = 550
                self.match(MiniGoParser.COLON_ASSIGN)
                self.state = 551
                self.expression()
                self.state = 553 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 552
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 555 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 557
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable2(self):
            return self.getTypedRuleContext(MiniGoParser.Assignable2Context,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement2




    def assign_statement2(self):

        localctx = MiniGoParser.Assign_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assign_statement2)
        self._la = 0 # Token type
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.assignable2()
                self.state = 561
                self.match(MiniGoParser.ASSIGN)
                self.state = 562
                self.expression()
                self.state = 564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 563
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 566 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.assignable2()
                self.state = 569
                self.match(MiniGoParser.ADD_ASSIGN)
                self.state = 570
                self.expression()
                self.state = 572 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 571
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 574 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.assignable2()
                self.state = 577
                self.match(MiniGoParser.SUB_ASSIGN)
                self.state = 578
                self.expression()
                self.state = 580 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 579
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 582 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 584
                self.assignable2()
                self.state = 585
                self.match(MiniGoParser.MUL_ASSIGN)
                self.state = 586
                self.expression()
                self.state = 588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 587
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 590 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 592
                self.assignable2()
                self.state = 593
                self.match(MiniGoParser.DIV_ASSIGN)
                self.state = 594
                self.expression()
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 595
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 600
                self.assignable2()
                self.state = 601
                self.match(MiniGoParser.MOD_ASSIGN)
                self.state = 602
                self.expression()
                self.state = 604 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 603
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 608
                self.assignable2()
                self.state = 609
                self.match(MiniGoParser.COLON_ASSIGN)
                self.state = 610
                self.expression()
                self.state = 612 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 611
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 614 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 616
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignable2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignable2




    def assignable2(self):

        localctx = MiniGoParser.Assignable2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignable2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail(self):
            return self.getTypedRuleContext(MiniGoParser.TailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignable




    def assignable(self):

        localctx = MiniGoParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(MiniGoParser.ID)
            self.state = 622
            self.tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail(self):
            return self.getTypedRuleContext(MiniGoParser.TailContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_tail




    def tail(self):

        localctx = MiniGoParser.TailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tail)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.match(MiniGoParser.DOT)
                self.state = 625
                self.match(MiniGoParser.ID)
                self.state = 626
                self.tail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(MiniGoParser.LBRACK)
                self.state = 628
                self.expression()
                self.state = 629
                self.match(MiniGoParser.RBRACK)
                self.state = 630
                self.tail()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.return_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tail2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Tail2Context,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_tail2




    def tail2(self):

        localctx = MiniGoParser.Tail2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_tail2)
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.match(MiniGoParser.DOT)
                self.state = 637
                self.match(MiniGoParser.ID)
                self.state = 638
                self.tail2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.type_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement1(self):
            return self.getTypedRuleContext(MiniGoParser.If_statement1Context,0)


        def else_if_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Else_if_statementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Else_if_statementContext,i)


        def else_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_block




    def if_block(self):

        localctx = MiniGoParser.If_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.if_statement1()
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self.else_if_statement() 
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 650
                self.else_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def conditional_body_block(self):
            return self.getTypedRuleContext(MiniGoParser.Conditional_body_blockContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement1




    def if_statement1(self):

        localctx = MiniGoParser.If_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_if_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(MiniGoParser.IF)
            self.state = 654
            self.match(MiniGoParser.LPAREN)
            self.state = 655
            self.expression()
            self.state = 656
            self.match(MiniGoParser.RPAREN)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 657
                self.match(MiniGoParser.NEWLINE)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 663
            self.conditional_body_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def bodyBLOCK(self):
            return self.getTypedRuleContext(MiniGoParser.BodyBLOCKContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_else_statement




    def else_statement(self):

        localctx = MiniGoParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(MiniGoParser.ELSE)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 666
                self.match(MiniGoParser.NEWLINE)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.bodyBLOCK()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyBLOCKContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_bodyBLOCK




    def bodyBLOCK(self):

        localctx = MiniGoParser.BodyBLOCKContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_bodyBLOCK)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(MiniGoParser.LBRACE)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 675
                self.match(MiniGoParser.NEWLINE)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 681
            self.statement_with_newlines()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 682
                self.match(MiniGoParser.NEWLINE)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_if_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def conditional_body_block(self):
            return self.getTypedRuleContext(MiniGoParser.Conditional_body_blockContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_else_if_statement




    def else_if_statement(self):

        localctx = MiniGoParser.Else_if_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_else_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(MiniGoParser.ELSE)
            self.state = 691
            self.match(MiniGoParser.IF)
            self.state = 692
            self.match(MiniGoParser.LPAREN)
            self.state = 693
            self.expression()
            self.state = 694
            self.match(MiniGoParser.RPAREN)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 695
                self.match(MiniGoParser.NEWLINE)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self.conditional_body_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_body_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Statement2Context,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_conditional_body_block




    def conditional_body_block(self):

        localctx = MiniGoParser.Conditional_body_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_conditional_body_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(MiniGoParser.LBRACE)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 704
                self.match(MiniGoParser.NEWLINE)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self.statement2()
            self.state = 711
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def blockIF(self):
            return self.getTypedRuleContext(MiniGoParser.BlockIFContext,0)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ELSE)
            else:
                return self.getToken(MiniGoParser.ELSE, i)

        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def blockIF2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.BlockIF2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.BlockIF2Context,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.match(MiniGoParser.IF)
                self.state = 714
                self.match(MiniGoParser.LPAREN)
                self.state = 715
                self.expression()
                self.state = 716
                self.match(MiniGoParser.RPAREN)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 717
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 723
                self.blockIF()

                self.state = 724
                self.match(MiniGoParser.ELSE)
                self.state = 725
                self.if_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(MiniGoParser.IF)
                self.state = 728
                self.match(MiniGoParser.LPAREN)
                self.state = 729
                self.expression()
                self.state = 730
                self.match(MiniGoParser.RPAREN)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 731
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 737
                self.blockIF()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 738
                    self.match(MiniGoParser.ELSE)
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==61:
                        self.state = 739
                        self.match(MiniGoParser.NEWLINE)
                        self.state = 744
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 745
                    self.blockIF2()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(MiniGoParser.IF)
                self.state = 752
                self.match(MiniGoParser.LPAREN)
                self.state = 753
                self.expression()
                self.state = 754
                self.match(MiniGoParser.RPAREN)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 755
                    self.match(MiniGoParser.NEWLINE)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self.blockIF2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_block




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(MiniGoParser.LBRACE)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 766
                self.match(MiniGoParser.NEWLINE)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254986804) != 0):
                self.state = 772
                self.statement2()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 778
            self.match(MiniGoParser.RBRACE)
            self.state = 782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 779
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockIFContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_blockIF




    def blockIF(self):

        localctx = MiniGoParser.BlockIFContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_blockIF)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(MiniGoParser.LBRACE)
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 786
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254986804) != 0):
                self.state = 792
                self.statement2()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50 or _la==61:
                self.state = 798
                _la = self._input.LA(1)
                if not(_la==50 or _la==61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 801
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockIF2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Statement2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Statement2Context,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_blockIF2




    def blockIF2(self):

        localctx = MiniGoParser.BlockIF2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_blockIF2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(MiniGoParser.LBRACE)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 804
                self.match(MiniGoParser.NEWLINE)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254986804) != 0):
                self.state = 810
                self.statement2()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 816
            self.match(MiniGoParser.RBRACE)
            self.state = 818 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 817
                    self.match(MiniGoParser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 820 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def assign_statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statement2Context,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def COLON_ASSIGN(self):
            return self.getToken(MiniGoParser.COLON_ASSIGN, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.match(MiniGoParser.FOR)
                self.state = 823
                self.expression()
                self.state = 824
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(MiniGoParser.FOR)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 827
                    self.match(MiniGoParser.VAR)


                self.state = 830
                self.assign_statement2()
                self.state = 831
                self.expression()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 832
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 835 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                self.state = 837
                self.match(MiniGoParser.ID)
                self.state = 838
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6528350289920) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self.expression()
                self.state = 840
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 842
                self.match(MiniGoParser.FOR)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 843
                    self.match(MiniGoParser.VAR)


                self.state = 846
                self.assign_statement2()
                self.state = 847
                self.match(MiniGoParser.COMMA)
                self.state = 848
                self.match(MiniGoParser.ID)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 849
                    self.match(MiniGoParser.COLON_ASSIGN)


                self.state = 852
                self.match(MiniGoParser.RANGE)
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.literal()


                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(MiniGoParser.ID)


                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9288674231467010) != 0):
                    self.state = 859
                    self.return_type()


                self.state = 862
                self.block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.match(MiniGoParser.FOR)
                self.state = 865
                self.match(MiniGoParser.VAR)
                self.state = 866
                self.assign_statement()
                self.state = 867
                self.expression()
                self.state = 869 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 868
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 871 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50 or _la==61):
                        break

                self.state = 873
                self.match(MiniGoParser.ID)
                self.state = 874
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6528350289920) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 875
                self.expression()
                self.state = 876
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_break_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(MiniGoParser.BREAK)
            self.state = 882 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 881
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 884 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(MiniGoParser.CONTINUE)
            self.state = 888 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 887
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 890 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr1(self):
            return self.getTypedRuleContext(MiniGoParser.PrimaryExpr1Context,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.primaryExpr1()
            self.state = 894 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 893
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 896 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.match(MiniGoParser.RETURN)

                self.state = 899
                self.expression()
                self.state = 901 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 900
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 903 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.match(MiniGoParser.RETURN)
                self.state = 907 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 906
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 909 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared




    def declared(self):

        localctx = MiniGoParser.DeclaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declared)
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.function_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.variables_declared()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.constants_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 916
                self.method_declared()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 917
                self.struct_declared()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 918
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared2(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declared2Context,0)


        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared2




    def declared2(self):

        localctx = MiniGoParser.Declared2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_declared2)
        try:
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.variables_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.constants_declared2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.function_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.method_declared()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.struct_declared()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared3




    def declared3(self):

        localctx = MiniGoParser.Declared3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declared3)
        try:
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.variables_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.constants_declared()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 931
                self.struct_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 932
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variables_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variables_declared




    def variables_declared(self):

        localctx = MiniGoParser.Variables_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_variables_declared)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.match(MiniGoParser.VAR)
                self.state = 936
                self.match(MiniGoParser.ID)
                self.state = 937
                self.type_spec()
                self.state = 938
                self.match(MiniGoParser.ASSIGN)
                self.state = 939
                self.expression()
                self.state = 941 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 940
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 943 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(MiniGoParser.VAR)
                self.state = 946
                self.match(MiniGoParser.ID)
                self.state = 947
                self.match(MiniGoParser.ASSIGN)
                self.state = 948
                self.expression()
                self.state = 950 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 949
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 952 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.match(MiniGoParser.VAR)
                self.state = 955
                self.match(MiniGoParser.ID)
                self.state = 956
                self.type_spec()
                self.state = 958 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 957
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 960 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 962
                self.match(MiniGoParser.VAR)
                self.state = 963
                self.match(MiniGoParser.ID)
                self.state = 964
                self.type_spec()
                self.state = 965
                self.match(MiniGoParser.ASSIGN)
                self.state = 966
                self.match(MiniGoParser.ID)
                self.state = 967
                self.expression()
                self.state = 969 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 968
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 971 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 973
                self.match(MiniGoParser.VAR)
                self.state = 974
                self.match(MiniGoParser.ID)
                self.state = 975
                self.return_type()
                self.state = 976
                self.type_spec()
                self.state = 977
                self.match(MiniGoParser.ASSIGN)
                self.state = 978
                self.expression()
                self.state = 980 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 979
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 982 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 984
                self.match(MiniGoParser.VAR)
                self.state = 985
                self.match(MiniGoParser.ID)
                self.state = 986
                self.return_type()
                self.state = 987
                self.type_spec()
                self.state = 989 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 988
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 991 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_spec




    def type_spec(self):

        localctx = MiniGoParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254756354) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(MiniGoParser.Constant_expressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared




    def constants_declared(self):

        localctx = MiniGoParser.Constants_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_constants_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(MiniGoParser.CONST)
            self.state = 998
            self.match(MiniGoParser.ID)
            self.state = 999
            self.match(MiniGoParser.ASSIGN)
            self.state = 1000
            self.constant_expression()
            self.state = 1002 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1001
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1004 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declared2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(MiniGoParser.Constant_expressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared2




    def constants_declared2(self):

        localctx = MiniGoParser.Constants_declared2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constants_declared2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(MiniGoParser.CONST)
            self.state = 1007
            self.match(MiniGoParser.ID)
            self.state = 1008
            self.match(MiniGoParser.ASSIGN)
            self.state = 1009
            self.constant_expression()
            self.state = 1011 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1010
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1013 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constant_expression




    def constant_expression(self):

        localctx = MiniGoParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def function_body(self):
            return self.getTypedRuleContext(MiniGoParser.Function_bodyContext,0)


        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_declared




    def function_declared(self):

        localctx = MiniGoParser.Function_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_function_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(MiniGoParser.FUNC)
            self.state = 1018
            self.match(MiniGoParser.ID)
            self.state = 1019
            self.match(MiniGoParser.LPAREN)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1020
                self.parameter_list()


            self.state = 1023
            self.match(MiniGoParser.RPAREN)
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.return_type()


            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1027
                self.match(MiniGoParser.ID)


            self.state = 1030
            self.function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(MiniGoParser.ParameterContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_list




    def parameter_list(self):

        localctx = MiniGoParser.Parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameter_list)
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.parameter()
                self.state = 1033
                self.type_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.parameter()
                self.state = 1036
                self.match(MiniGoParser.COMMA)
                self.state = 1037
                self.parameter_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter




    def parameter(self):

        localctx = MiniGoParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(MiniGoParser.ID)
            self.state = 1042
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def LBRACK(self):
            return self.getToken(MiniGoParser.LBRACK, 0)

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def RBRACK(self):
            return self.getToken(MiniGoParser.RBRACK, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_type




    def parameter_type(self):

        localctx = MiniGoParser.Parameter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parameter_type)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.type_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.match(MiniGoParser.LBRACK)
                self.state = 1046
                self.match(MiniGoParser.INT_LIT)
                self.state = 1047
                self.match(MiniGoParser.RBRACK)
                self.state = 1048
                self.parameter_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def array_type(self):
            return self.getTypedRuleContext(MiniGoParser.Array_typeContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_return_type




    def return_type(self):

        localctx = MiniGoParser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_return_type)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 10, 11, 12, 13, 53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.type_spec()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.array_type()
                self.state = 1055
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1054
                    self.match(MiniGoParser.ID)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LBRACK)
            else:
                return self.getToken(MiniGoParser.LBRACK, i)

        def INT_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.INT_LIT)
            else:
                return self.getToken(MiniGoParser.INT_LIT, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RBRACK)
            else:
                return self.getToken(MiniGoParser.RBRACK, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def type_spec(self):
            return self.getTypedRuleContext(MiniGoParser.Type_specContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_type




    def array_type(self):

        localctx = MiniGoParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_array_type)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.match(MiniGoParser.LBRACK)
                self.state = 1060
                self.match(MiniGoParser.INT_LIT)
                self.state = 1061
                self.match(MiniGoParser.RBRACK)
                self.state = 1062
                self.match(MiniGoParser.LBRACK)
                self.state = 1063
                self.match(MiniGoParser.INT_LIT)
                self.state = 1064
                self.match(MiniGoParser.RBRACK)
                self.state = 1066
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1065
                    self.match(MiniGoParser.ID)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(MiniGoParser.LBRACK)
                self.state = 1069
                self.match(MiniGoParser.INT_LIT)
                self.state = 1070
                self.match(MiniGoParser.RBRACK)
                self.state = 1072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1071
                    self.match(MiniGoParser.ID)


                self.state = 1075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1074
                    self.type_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_function_body




    def function_body(self):

        localctx = MiniGoParser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(MiniGoParser.LBRACE)
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 1080
                self.match(MiniGoParser.NEWLINE)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254986804) != 0):
                self.state = 1086
                self.statement_with_newlines()


            self.state = 1089
            self.match(MiniGoParser.RBRACE)
            self.state = 1091 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1090
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1093 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_with_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement2(self):
            return self.getTypedRuleContext(MiniGoParser.Statement2Context,0)


        def statement_with_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_with_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement_with_newlines




    def statement_with_newlines(self):

        localctx = MiniGoParser.Statement_with_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement_with_newlines)
        try:
            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.statement2()
                self.state = 1096
                self.statement_with_newlines()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.statement2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def recursive_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Recursive_newlinesContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement_list




    def statement_list(self):

        localctx = MiniGoParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_statement_list)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.statement()
                self.state = 1103
                self.recursive_newlines()
                self.state = 1104
                self.statement_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def receiver(self):
            return self.getTypedRuleContext(MiniGoParser.ReceiverContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def function_body(self):
            return self.getTypedRuleContext(MiniGoParser.Function_bodyContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def parameter_list2(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_list2Context,0)


        def receiver2(self):
            return self.getTypedRuleContext(MiniGoParser.Receiver2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_declared




    def method_declared(self):

        localctx = MiniGoParser.Method_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_method_declared)
        self._la = 0 # Token type
        try:
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(MiniGoParser.FUNC)
                self.state = 1109
                self.match(MiniGoParser.LPAREN)
                self.state = 1110
                self.receiver()
                self.state = 1111
                self.match(MiniGoParser.RPAREN)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1112
                    self.match(MiniGoParser.ID)


                self.state = 1115
                self.match(MiniGoParser.LPAREN)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1116
                    self.parameter_list2()


                self.state = 1119
                self.match(MiniGoParser.RPAREN)
                self.state = 1120
                self.return_type()
                self.state = 1121
                self.function_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                self.match(MiniGoParser.FUNC)
                self.state = 1124
                self.match(MiniGoParser.LPAREN)
                self.state = 1125
                self.receiver()
                self.state = 1126
                self.match(MiniGoParser.RPAREN)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1127
                    self.match(MiniGoParser.ID)


                self.state = 1130
                self.match(MiniGoParser.LPAREN)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1131
                    self.parameter_list2()


                self.state = 1134
                self.match(MiniGoParser.RPAREN)
                self.state = 1135
                self.match(MiniGoParser.ID)
                self.state = 1136
                self.function_body()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1138
                self.match(MiniGoParser.FUNC)
                self.state = 1139
                self.match(MiniGoParser.LPAREN)
                self.state = 1140
                self.receiver()
                self.state = 1141
                self.match(MiniGoParser.RPAREN)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1142
                    self.match(MiniGoParser.ID)


                self.state = 1145
                self.match(MiniGoParser.LPAREN)
                self.state = 1146
                self.parameter_list2()
                self.state = 1147
                self.match(MiniGoParser.RPAREN)
                self.state = 1148
                self.function_body()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1150
                self.match(MiniGoParser.FUNC)
                self.state = 1151
                self.match(MiniGoParser.LPAREN)
                self.state = 1152
                self.receiver()
                self.state = 1153
                self.match(MiniGoParser.RPAREN)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1154
                    self.match(MiniGoParser.ID)


                self.state = 1157
                self.match(MiniGoParser.LPAREN)
                self.state = 1158
                self.parameter_list2()
                self.state = 1159
                self.match(MiniGoParser.RPAREN)
                self.state = 1160
                self.function_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.match(MiniGoParser.FUNC)
                self.state = 1163
                self.match(MiniGoParser.LPAREN)
                self.state = 1164
                self.receiver()
                self.state = 1165
                self.match(MiniGoParser.RPAREN)
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1166
                    self.match(MiniGoParser.ID)


                self.state = 1169
                self.match(MiniGoParser.LPAREN)
                self.state = 1170
                self.match(MiniGoParser.RPAREN)
                self.state = 1171
                self.function_body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1173
                self.match(MiniGoParser.FUNC)
                self.state = 1174
                self.match(MiniGoParser.ID)
                self.state = 1175
                self.match(MiniGoParser.LPAREN)
                self.state = 1176
                self.match(MiniGoParser.RPAREN)
                self.state = 1177
                self.function_body()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.match(MiniGoParser.FUNC)
                self.state = 1179
                self.match(MiniGoParser.LPAREN)
                self.state = 1180
                self.receiver2()
                self.state = 1181
                self.match(MiniGoParser.RPAREN)
                self.state = 1182
                self.match(MiniGoParser.ID)
                self.state = 1183
                self.match(MiniGoParser.LPAREN)
                self.state = 1184
                self.match(MiniGoParser.RPAREN)
                self.state = 1185
                self.return_type()
                self.state = 1186
                self.function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_list2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Parameter2Context)
            else:
                return self.getTypedRuleContext(MiniGoParser.Parameter2Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter_list2




    def parameter_list2(self):

        localctx = MiniGoParser.Parameter_list2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parameter_list2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.parameter2()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 1191
                self.match(MiniGoParser.COMMA)
                self.state = 1192
                self.parameter2()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_parameter2




    def parameter2(self):

        localctx = MiniGoParser.Parameter2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameter2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(MiniGoParser.ID)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9288674231467010) != 0):
                self.state = 1199
                self.return_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver




    def receiver(self):

        localctx = MiniGoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_receiver)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1202
                self.match(MiniGoParser.ID)


            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1205
                self.match(MiniGoParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receiver2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver2




    def receiver2(self):

        localctx = MiniGoParser.Receiver2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_receiver2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(MiniGoParser.ID)
            self.state = 1209
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.FieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.FieldContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_declared




    def struct_declared(self):

        localctx = MiniGoParser.Struct_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_struct_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(MiniGoParser.TYPE)
            self.state = 1212
            self.match(MiniGoParser.ID)
            self.state = 1213
            self.match(MiniGoParser.STRUCT)
            self.state = 1214
            self.match(MiniGoParser.LBRACE)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 1215
                self.match(MiniGoParser.NEWLINE)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1222 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1221
                self.field()
                self.state = 1224 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254790272) != 0)):
                    break

            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 1226
                self.match(MiniGoParser.NEWLINE)
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.match(MiniGoParser.RBRACE)
            self.state = 1233
            _la = self._input.LA(1)
            if not(_la==50 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.FieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.FieldContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_list




    def field_list(self):

        localctx = MiniGoParser.Field_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_field_list)
        self._la = 0 # Token type
        try:
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.field()
                self.state = 1240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1236
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1237
                        self.field() 
                    self.state = 1242
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 1243
                self.match(MiniGoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.return_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def declared3(self):
            return self.getTypedRuleContext(MiniGoParser.Declared3Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.match(MiniGoParser.ID)
                self.state = 1249
                self.return_type()
                self.state = 1251 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1250
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1253 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                pass
            elif token in [7, 14, 15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.declared3()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def method_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Method_declContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Method_declContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_declared




    def interface_declared(self):

        localctx = MiniGoParser.Interface_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_interface_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(MiniGoParser.TYPE)
            self.state = 1259
            self.match(MiniGoParser.ID)
            self.state = 1260
            self.match(MiniGoParser.INTERFACE)
            self.state = 1261
            self.match(MiniGoParser.LBRACE)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 1262
                self.match(MiniGoParser.NEWLINE)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1269 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1268
                self.method_decl()
                self.state = 1271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==53):
                    break

            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 1273
                self.match(MiniGoParser.NEWLINE)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1279
            self.match(MiniGoParser.RBRACE)
            self.state = 1281 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1280
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1283 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def optional_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Optional_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_optional_newlines




    def optional_newlines(self):

        localctx = MiniGoParser.Optional_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_optional_newlines)
        try:
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.match(MiniGoParser.NEWLINE)
                self.state = 1287
                self.optional_newlines()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_list




    def method_list(self):

        localctx = MiniGoParser.Method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_method_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.method_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_newlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def recursive_newlines(self):
            return self.getTypedRuleContext(MiniGoParser.Recursive_newlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_recursive_newlines




    def recursive_newlines(self):

        localctx = MiniGoParser.Recursive_newlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_recursive_newlines)
        try:
            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(MiniGoParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.match(MiniGoParser.NEWLINE)
                self.state = 1294
                self.recursive_newlines()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(MiniGoParser.ID)
            self.state = 1298
            self.match(MiniGoParser.LPAREN)
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1299
                self.parameter_list()


            self.state = 1302
            self.match(MiniGoParser.RPAREN)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9288674231467010) != 0):
                self.state = 1303
                self.return_type()


            self.state = 1307 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1306
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1309 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(MiniGoParser.Parameter_listContext,0)


        def return_type(self):
            return self.getTypedRuleContext(MiniGoParser.Return_typeContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_method_signature




    def method_signature(self):

        localctx = MiniGoParser.Method_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_method_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(MiniGoParser.ID)
            self.state = 1312
            self.match(MiniGoParser.LPAREN)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1313
                self.parameter_list()


            self.state = 1316
            self.match(MiniGoParser.RPAREN)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9288674231467010) != 0):
                self.state = 1317
                self.return_type()


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1320
                self.match(MiniGoParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[16] = self.logicalOrExpr_sempred
        self._predicates[17] = self.logicalAndExpr_sempred
        self._predicates[18] = self.equalityExpr_sempred
        self._predicates[19] = self.relationalExpr_sempred
        self._predicates[20] = self.additiveExpr_sempred
        self._predicates[21] = self.multiplicativeExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logicalOrExpr_sempred(self, localctx:LogicalOrExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logicalAndExpr_sempred(self, localctx:LogicalAndExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def equalityExpr_sempred(self, localctx:EqualityExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def relationalExpr_sempred(self, localctx:RelationalExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def additiveExpr_sempred(self, localctx:AdditiveExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def multiplicativeExpr_sempred(self, localctx:MultiplicativeExprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




